@using BlazorApp_ProductosAPI.Models
@using BlazorApp_ProductosAPI.Components
@using BlazorApp_ProductosAPI.Services
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IAuthService AuthService

<style>
    /* Estilos para la grilla de datos */
    .data-grid-container {
        display: flex;
        flex-direction: column;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .data-grid-header {
        background: #f8f9fa;
        border-bottom: 2px solid #dee2e6;
        padding: 0.5rem;
        flex-shrink: 0;
    }

    .data-grid-content {
        overflow: hidden; /* controlar el scroll dentro del contenedor */
        position: relative;
    }

    .data-grid-table {
        width: 100%;
        border-collapse: collapse;
        table-layout: fixed;
    }

    .data-grid-th {
        background: #f8f9fa;
        padding: 0.75rem;
        font-weight: 600;
        color: #495057;
        border-right: 1px solid #dee2e6;
        position: relative;
        cursor: default;
        user-select: none;
        text-align: left;
    }

    .data-grid-th:hover {
        background: #e9ecef;
    }

    .data-grid-th::after {
        content: '';
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        background: transparent;
        cursor: default;
    }

    .data-grid-th:hover::after {
        background: #007bff;
    }

    .data-grid-td {
        padding: 0.75rem 1rem; /* más aire a la izquierda/derecha */
        border-right: 1px solid #dee2e6;
        border-bottom: 1px solid #eee;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        background: white;
    }

    .data-grid-tbody tr:hover .data-grid-td {
        background: #f8f9fa;
    }

    .data-grid-loading {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        color: #6c757d;
    }

    .data-grid-empty {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem;
        color: #6c757d;
        text-align: center;
    }

    .data-grid-empty i {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    /* Estilos para el modal de configuración */
    .column-config-content {
        padding: 1rem;
    }

    .column-list {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 0.75rem;
        background: #f8f9fa;
    }

    .column-item {
        margin-bottom: 0.5rem;
        padding: 0.5rem;
        background: white;
        border-radius: 6px;
        border: 1px solid #e9ecef;
        transition: all 0.2s ease;
    }

    .column-item:hover {
        background: #f8f9fa;
        border-color: #007bff;
    }

    .column-item .form-check-input {
        margin-right: 1.25rem !important;
        margin-top: 0.25rem;
        width: 1rem !important;
        height: 1rem !important;
        min-width: 1rem !important;
        min-height: 1rem !important;
        max-width: 1rem !important;
        max-height: 1rem !important;
        flex-shrink: 0 !important;
        appearance: checkbox !important;
        -webkit-appearance: checkbox !important;
        -moz-appearance: checkbox !important;
        border: 1px solid #6c757d !important;
        border-radius: 0.25rem !important;
        background-color: #fff !important;
        background-image: none !important;
        background-size: 0 !important;
        background-position: 0 !important;
        background-repeat: no-repeat !important;
    }

    .column-item .form-check-input:checked {
        background-color: #007bff !important;
        border-color: #007bff !important;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m6 10 3 3 6-6'/%3e%3c/svg%3e") !important;
        background-size: 0.75rem !important;
        background-position: center !important;
        background-repeat: no-repeat !important;
    }

    .column-item .form-check-label {
        font-weight: 500;
        color: #495057;
        cursor: pointer;
        margin-bottom: 0;
        margin-left: 0 !important;
        padding-left: 0 !important;
        display: flex;
        align-items: center;
        flex: 1;
    }

    .column-item .form-check {
        display: flex !important;
        align-items: center !important;
        margin-bottom: 0 !important;
        padding: 0.5rem !important;
    }

    .column-item .form-check-input:focus {
        border-color: #007bff !important;
        outline: 0 !important;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
    }


    .column-item:last-child {
        border-bottom: none;
    }

    .column-item .form-check-input {
        margin: 0;
    }

    .column-item .form-check-label {
        font-weight: 500;
        cursor: pointer;
        margin: 0;
        flex: 1;
    }

    .column-item .drag-handle {
        cursor: move;
        color: #6c757d;
        font-size: 1.2rem;
    }

    .column-item .drag-handle:hover {
        color: #495057;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .data-grid-table { display: block; }
        .data-grid-thead { display: none; }
        .data-grid-tbody { display: block; }

        .data-grid-tr {
            display: block;
            margin-bottom: 0.75rem; /* filas más compactas */
            border: 1px solid #dee2e6;
            border-radius: 8px;
            background: #f8f9fa;
            padding: 0.75rem; /* padding general para toda la fila */
        }

        /* Mostrar toda la información en formato compacto para móviles */
        .data-grid-td {
            display: inline; /* Cambiar a inline para que todo esté en una línea */
            border: none;
            padding: 0;
            margin-right: 0.25rem; /* Reducir margen para más compacto */
            white-space: normal;
            line-height: 1.2; /* Reducir altura de línea para más compacto */
        }

        /* Ocultar las etiquetas de datos individuales */
        .data-grid-td:before {
            display: none;
        }

        /* Estilos específicos para cada tipo de información - MÁS COMPACTO */
        .data-grid-td[data-label="Rub/Cód"] {
            font-weight: bold;
            color: #6c757d;
            font-size: 0.8rem; /* Más pequeño */
            margin-right: 0.5rem; /* Espacio después del rubro */
        }

        .data-grid-td[data-label="Producto"] {
            font-weight: 500;
            color: #333;
            display: inline; /* En la misma línea que el rubro */
            font-size: 0.85rem; /* Más pequeño */
            margin-right: 0.5rem;
        }

        .data-grid-td[data-label="Stock Actual"] {
            color: #dc3545; /* rojo para el stock */
            font-weight: 600;
            font-size: 0.8rem; /* Más pequeño */
            margin-right: 0.5rem;
        }

        .data-grid-td[data-label="Código de barras"] {
            font-weight: bold;
            color: #495057;
            font-size: 0.75rem; /* Más pequeño */
            display: block; /* Código de barras en su propia línea */
            margin-top: 0.15rem; /* Reducir margen superior */
        }

        /* Layout compacto para las filas */
        .data-grid-tr {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            padding: 0.5rem; /* Reducir padding general */
        }

        /* Primera línea: Rubro + Producto + Stock */
        .data-grid-tr .data-grid-td[data-label="Rub/Cód"],
        .data-grid-tr .data-grid-td[data-label="Producto"],
        .data-grid-tr .data-grid-td[data-label="Stock Actual"] {
            display: inline;
        }

        /* Segunda línea: Código de barras */
        .data-grid-tr .data-grid-td[data-label="Código de barras"] {
            display: block;
            width: 100%;
        }

        /* ELIMINAR BOTÓN DE SELECCIÓN EN MÓVILES - COMPLETAMENTE OCULTO */
        .data-grid-action-cell {
            display: none !important;
            visibility: hidden !important;
            opacity: 0 !important;
            width: 0 !important;
            min-width: 0 !important;
            padding: 0 !important;
            margin: 0 !important;
            overflow: hidden !important;
        }

        .data-grid-select-btn {
            display: none !important;
            visibility: hidden !important;
            opacity: 0 !important;
        }

        /* Inputs ocupan todo el ancho disponible */
        .data-grid-td .form-control {
            width: 100% !important;
            min-width: 0 !important;
            height: auto !important;
            padding: 0.5rem 0.6rem !important;
            line-height: 1.25 !important;
        }
        
    /* Mostrar texto del botón ENVIAR INVENTARIO en móviles */
    .data-grid-header .btn-success .btn-text {
        display: inline !important;
    }
    
    /* ELIMINAR CUALQUIER ESPACIO SOBRANTE EN MÓVILES */
    .data-grid-container {
        margin-bottom: 0 !important;
        padding-bottom: 0 !important;
    }
        
        .data-grid-content {
            margin-bottom: 0 !important;
            padding-bottom: 0 !important;
        }
        
        .data-grid-table {
            margin-bottom: 0 !important;
        }
        
        .data-grid-tbody {
            margin-bottom: 0 !important;
        }
        
        .data-grid-tr:last-child {
            margin-bottom: 0 !important;
        }
        
        /* FORZAR QUE EL FOOTER QUEDE PEGADO AL FONDO EN MÓVILES */
        .data-grid-container {
            position: fixed !important;
            top: 60px !important;
            left: 0 !important;
            right: 0 !important;
            bottom: 0 !important;
            width: 100vw !important;
            height: calc(100vh - 60px) !important;
            max-height: calc(100vh - 60px) !important;
            margin: 0 !important;
            padding: 0 !important;
            box-sizing: border-box !important;
            overflow: hidden !important;
            display: flex !important;
            flex-direction: column !important;
        }
        
        .data-grid-content {
            flex: 1 !important;
            overflow-y: auto !important;
            overflow-x: hidden !important;
            margin: 0 !important;
            padding: 0 !important;
            box-sizing: border-box !important;
            height: calc(100% - 50px) !important;
            max-height: calc(100% - 50px) !important;
        }
        
        .data-grid-footer {
            position: fixed !important;
            bottom: 0 !important;
            left: 0 !important;
            right: 0 !important;
            width: 100vw !important;
            height: 50px !important;
            max-height: 50px !important;
            min-height: 50px !important;
            margin: 0 !important;
            padding: 0.5rem !important;
            box-sizing: border-box !important;
            background: #f8f9fa !important;
            border-top: 2px solid #dee2e6 !important;
            text-align: center !important;
            display: block !important;
            visibility: visible !important;
            opacity: 1 !important;
            z-index: 9999 !important;
            transform: translateZ(0) !important;
            -webkit-transform: translateZ(0) !important;
        }
    }

    /* Estilos para modo developer (pantallas muy pequeñas) */
    @@media (max-width: 1024px) {
        .data-grid-container {
            min-height: 300px;
        }
        
        .data-grid-content {
            min-height: 250px;
            max-height: 70vh;
            overflow-y: auto;
        }
    }

    /* Forzar responsividad en pantallas pequeñas */
    .data-grid-container.responsive {
        height: auto !important;
        min-height: 300px;
    }

    .data-grid-container.responsive .data-grid-content {
        height: auto !important;
        min-height: 250px;
        max-height: 70vh;
        overflow-y: auto;
    }

    .data-grid-container.responsive .data-grid-table {
        width: 100%;
        table-layout: auto;
    }

    .data-grid-container.responsive .data-grid-th,
    .data-grid-container.responsive .data-grid-td {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        min-width: 80px;
    }
</style>

<div class="data-grid-container">
    <!-- Header de la grilla -->
    <div class="data-grid-header">
        <div class="d-flex justify-content-between align-items-center">
            <h6 class="mb-0">@Title</h6>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-success" @onclick="OpenInventoryModal">
                    <i class="oi oi-paperclip"></i> 
                    <span class="btn-text">ENVIAR INVENTARIO</span>
                    @if (inventoryItems.Count > 0)
                    {
                        <span class="ms-1">(@inventoryItems.Count)</span>
                    }
                </button>
                <button class="btn btn-sm btn-outline-primary" @onclick="OpenColumnConfig">
                    <i class="oi oi-cog"></i> <span class="btn-text">Configurar columnas</span>
                </button>
                @if (ShowRefreshButton)
                {
                    <button class="btn btn-sm btn-outline-secondary" @onclick="OnRefresh">
                        <i class="oi oi-reload"></i> Actualizar
                    </button>
                }
            </div>
        </div>
    </div>

    <!-- Contenido de la grilla -->
    <div class="data-grid-content">
        @if (IsLoading)
        {
            <div class="data-grid-loading">
                <span class="spinner-border spinner-border-sm me-2"></span>
                @LoadingText
            </div>
        }
        else if (!Data?.Any() == true)
        {
            <div class="data-grid-empty">
                <i class="oi oi-table"></i>
                <p>@EmptyText</p>
            </div>
        }
        else
        {
            <table class="data-grid-table">
                <thead class="data-grid-thead">
                    <tr>
                        @foreach (var column in VisibleColumns)
                        {
                            <th class="data-grid-th" 
                                style="@(column.Width != null ? $"width: {column.Width}" : "")"
                                data-column="@column.Key">
                                @column.Label
                            </th>
                        }
                    </tr>
                </thead>
                <tbody class="data-grid-tbody">
                    @foreach (var item in Data)
                    {
                        <tr class="data-grid-tr" @onclick="@(() => { if (OnRowClick.HasDelegate) OnRowClick.InvokeAsync(item); })">
                        @foreach (var column in VisibleColumns)
                        {
                            <td class="data-grid-td" 
                                data-label="@column.Label"
                                style="@(column.Width != null ? $"width: {column.Width}" : "")">
                                @{
                                    var value = GetColumnValue(item, column.Key);
                                    if (value is StockInputModel stockModel)
                                    {
                                        <StockInput Model="@stockModel" />
                                    }
                                    else
                                    {
                                        @if (value != null)
                                        {
                                            @((MarkupString)value.ToString())
                                        }
                                    }
                                }
                            </td>
                        }
                        <!-- Botón de selección para móviles - SOLO VISIBLE EN PANTALLAS PEQUEÑAS -->
                        <td class="data-grid-td data-grid-action-cell d-md-none" data-label="Acción">
                            <button class="btn btn-sm btn-outline-primary data-grid-select-btn" 
                                    @onclick="@(() => { if (OnRowClick.HasDelegate) OnRowClick.InvokeAsync(item); })"
                                    @onclick:stopPropagation="true"
                                    title="Seleccionar producto">
                                <i class="oi oi-check"></i>
                            </button>
                        </td>
                        </tr>
                    }
                </tbody>
            </table>
            
            <!-- Separador eliminado para móviles -->
        }
        
        <!-- FOOTER SIEMPRE VISIBLE - DENTRO DEL DATAGRID -->
        <div class="data-grid-footer" style="display: block !important; visibility: visible !important; opacity: 1 !important; background: #f8f9fa; border-top: 1px solid #dee2e6; padding: 0.5rem; text-align: center; position: sticky; bottom: 0; z-index: 1000;">
            <span class="data-grid-record-count" style="display: block !important; visibility: visible !important; opacity: 1 !important; font-size: 0.9rem; font-weight: 600; color: #495057;">
                Total: @(Data?.Count() ?? 0) registros
            </span>
        </div>
    </div>
</div>

<!-- Modal de configuración de columnas -->
<AppModal IsOpen="showColumnConfigModal" Title="Configurar Columnas" OnClose="() => showColumnConfigModal = false">
    <ChildContent>
        <div class="column-config-content">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <p class="text-muted mb-0">Selecciona qué columnas mostrar en la grilla de productos. Los cambios se guardan automáticamente:</p>
                <button class="btn btn-sm btn-outline-secondary" @onclick="ResetColumnConfig" title="Restaurar configuración por defecto">
                    <i class="oi oi-reload"></i> Restaurar por defecto
                </button>
            </div>
            <div class="column-list" id="column-list">
                @foreach (var column in Columns.OrderBy(c => c.Order))
                {
                    <div class="form-check column-item">
                        <input class="form-check-input" 
                               type="checkbox" 
                               @bind="column.IsVisible" 
                               id="column-@column.Key" />
                        <label class="form-check-label" for="column-@column.Key">
                            @column.Label
                        </label>
                    </div>
                }
            </div>
        </div>
    </ChildContent>
    <!-- NO HAY FOOTER - Los cambios se guardan automáticamente al marcar/desmarcar checkboxes -->
</AppModal>

<!-- Modal de Envío de Inventario -->
<AppModal IsOpen="showInventoryModal" Title="Enviar Inventario" OnClose="CloseInventoryModal">
    <ChildContent>
        <div class="inventory-content">
            <p class="text-muted mb-3 inventory-description">Productos escaneados con sus cantidades actuales:</p>
            <div class="inventory-list" style="max-height: 400px; overflow-y: auto;">
                @if (inventoryItems.Any())
                {
                    @foreach (var item in inventoryItems)
                    {
                        <div class="inventory-item" style="padding: 0.75rem; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <div style="font-weight: 600; color: #333;">
                                    <span style="color: #6c757d; font-size: 0.9rem;">@item.RubroCodigo</span> @item.ProductName
                                </div>
                                <div style="font-size: 0.9rem; color: #666;">Código: @item.Barcode</div>
                            </div>
                            <div style="text-align: right;">
                                <div style="font-weight: 600; color: #28a745;">Stock: @item.InventoryStock.ToString("N0") <span style="color: #666; font-weight: normal;">(@item.CurrentStock.ToString("N0"))</span></div>
                                <div style="display: flex; gap: 0.25rem; justify-content: flex-end; margin-top: 0.25rem;">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => EditInventoryItem(item)" title="Editar cantidad">
                                        <i class="oi oi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveInventoryItem(item.Barcode)" title="Eliminar">
                                        <i class="oi oi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center p-4" style="color: #6c757d;">
                        <i class="oi oi-inbox" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                        <p>No hay productos en el inventario</p>
                        <small>Escanea códigos de barras para agregar productos</small>
                    </div>
                }
            </div>
        </div>
    </ChildContent>
    <FooterContent>
        @if (inventorySentSuccessfully)
        {
            <div class="alert alert-success d-flex align-items-center" role="alert">
                <i class="oi oi-check me-2"></i>
                <div>Inventario enviado correctamente</div>
            </div>
        }
        else
        {
            <button class="btn btn-success" @onclick="SendInventory" disabled="@(!inventoryItems.Any() || isSendingInventory)">
                @if (isSendingInventory)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                    <span>Procesando...</span>
                }
                else
                {
                    <i class="oi oi-paperclip"></i>
                    <span>Enviar Inventario (@inventoryItems.Count)</span>
                }
            </button>
        }
    </FooterContent>
</AppModal>

<!-- Modal para editar cantidad de inventario -->
<AppModal IsOpen="showEditQuantityModal" Title="Editar Cantidad" OnClose="() => showEditQuantityModal = false">
    <ChildContent>
        @if (editingItem != null)
        {
            <div class="edit-quantity-content">
                <div style="margin-bottom: 1rem;">
                    <div style="font-weight: 600; color: #000 !important; margin-bottom: 0.5rem;">
                        <span style="color: #6c757d !important; font-size: 0.9rem;">@editingItem.RubroCodigo</span> @editingItem.ProductName
                    </div>
                    <div style="font-size: 0.9rem; color: #000 !important;">Código: @editingItem.Barcode</div>
                </div>
                
                <div class="form-group">
                    <label for="editQuantity" style="font-weight: 600; margin-bottom: 0.5rem; display: block; color: #000 !important;">Nueva cantidad:</label>
                    <input id="editQuantity" 
                           class="form-control" 
                           type="number" 
                           step="0.01" 
                           @bind="editingQuantity" 
                           @bind:event="oninput"
                           @onkeypress="OnEditQuantityKeyPress"
                           style="font-size: 1.1rem; padding: 0.75rem; color: #000 !important;"
                           inputmode="numeric" />
                </div>
                
                <div style="margin-top: 1rem; padding: 0.75rem; background-color: #f8f9fa; border-radius: 0.375rem;">
                    <div style="font-size: 0.9rem; color: #000 !important;">
                        <strong>Stock actual del sistema:</strong> @editingItem.CurrentStock.ToString("N0")
                    </div>
                </div>
            </div>
        }
    </ChildContent>
    <FooterContent>
        <div style="display: flex; gap: 0.5rem; justify-content: flex-start; align-items: center;">
            <button class="btn btn-outline-secondary" @onclick="() => showEditQuantityModal = false">Cancelar</button>
            <button class="btn btn-primary" @onclick="SaveEditedQuantity">Guardar</button>
        </div>
    </FooterContent>
</AppModal>

@code {
    [Parameter] public string Title { get; set; } = "Datos";
    [Parameter] public IEnumerable<object>? Data { get; set; }
    [Parameter] public List<ColumnConfig> Columns { get; set; } = new();
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public string LoadingText { get; set; } = "Cargando...";
    [Parameter] public string EmptyText { get; set; } = "No hay datos para mostrar";
    [Parameter] public bool ShowRefreshButton { get; set; } = true;
    [Parameter] public EventCallback<object> OnRowClick { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }
    [Parameter] public EventCallback<(string barcode, decimal newStock)> OnInventoryStockChanged { get; set; }
    [Parameter] public EventCallback OnInventorySent { get; set; }
    
    /// <summary>
    /// ID del depósito obtenido de la API de depósitos basado en el orden de la ubicación seleccionada
    /// Se usa para enviar el inventario con el depositoID correcto en lugar del valor hardcodeado
    /// </summary>
    [Parameter] public int? DepositoID { get; set; }
    
    [Parameter] public Func<object, string, object>? GetValueFunction { get; set; }

    private bool showColumnConfigModal = false;
    private bool showInventoryModal = false;
    private bool showEditQuantityModal = false;
    private bool isSendingInventory = false;
    private bool inventorySentSuccessfully = false;
    private List<ColumnConfig> availableColumns = new();
    private List<InventoryItem> inventoryItems = new();
    private InventoryItem? editingItem = null;
    private decimal editingQuantity = 0;

    private IEnumerable<ColumnConfig> VisibleColumns => availableColumns.Where(c => c.IsVisible).OrderBy(c => c.Order);

    protected override async Task OnInitializedAsync()
    {
        await LoadColumnConfig();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Columns?.Any() == true)
        {
            availableColumns = Columns.ToList();
        }
    }

    private object GetColumnValue(object item, string columnKey)
    {
        if (GetValueFunction != null)
        {
            return GetValueFunction(item, columnKey);
        }

        // Función por defecto usando reflexión
        var property = item.GetType().GetProperty(columnKey);
        if (property != null)
        {
            return property.GetValue(item) ?? string.Empty;
        }

        return string.Empty;
    }

    private async Task OnColumnContextMenu(MouseEventArgs e, ColumnConfig column)
    {
        showColumnConfigModal = true;
        await LoadColumnConfig();
        StateHasChanged();
    }

    private async Task StartColumnResize(MouseEventArgs e, ColumnConfig column)
    {
        if (e.Button == 0 && column.IsResizable) // Solo botón izquierdo
        {
            await JSRuntime.InvokeVoidAsync("startColumnResize", e.ClientX, column.Key);
        }
    }

    private async Task LoadColumnConfig()
    {
        if (!availableColumns.Any() && Columns?.Any() == true)
        {
            availableColumns = Columns.ToList();
        }

        // Cargar configuración desde localStorage
        try
        {
            var savedConfig = await JSRuntime.InvokeAsync<string>("localStorage.getItem", $"columnConfig_{Title}");
            if (!string.IsNullOrEmpty(savedConfig))
            {
                var config = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, bool>>(savedConfig);
                foreach (var column in availableColumns)
                {
                    if (config.ContainsKey(column.Key))
                    {
                        column.IsVisible = config[column.Key];
                    }
                }
            }
        }
        catch
        {
            // Usar configuración por defecto si hay error
        }
    }

    private async Task SaveColumnConfig()
    {
        try
        {
            var config = availableColumns.ToDictionary(c => c.Key, c => c.IsVisible);
            var configJson = System.Text.Json.JsonSerializer.Serialize(config);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"columnConfig_{Title}", configJson);
            showColumnConfigModal = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Manejar error
        }
    }

    private async Task ResetColumnConfig()
    {
        foreach (var column in availableColumns)
        {
            column.IsVisible = true;
        }
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", $"columnConfig_{Title}");
        StateHasChanged();
    }

    private async Task OpenColumnConfig()
    {
        showColumnConfigModal = true;
        await LoadColumnConfig();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Pequeño delay para asegurar que el DOM esté completamente renderizado
                await Task.Delay(100);
                await JSRuntime.InvokeVoidAsync("initDataGridResponsive");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error inicializando DataGrid responsive: {ex.Message}");
            }
        }
    }

    // Métodos para manejar el inventario
    private void OpenInventoryModal()
    {
        showInventoryModal = true;
        inventorySentSuccessfully = false; // Resetear estado de éxito
        StateHasChanged();
    }

    private async Task CloseInventoryModal()
    {
        showInventoryModal = false;
        inventorySentSuccessfully = false;
        StateHasChanged();
        
        // Hacer focus al textbox de código de barras después de cerrar la modal
        await Task.Delay(300); // Delay para asegurar que la modal se cierre completamente
        
        try 
        { 
            await JSRuntime.InvokeVoidAsync("blazorFocusById", "barcodeInput");
            Console.WriteLine("✅ Focus restaurado al textbox de código de barras después de cerrar modal de inventario");
        } 
        catch (Exception ex)
        {
            Console.WriteLine($"Error restaurando focus después de cerrar modal de inventario: {ex.Message}");
        }
    }

    public async Task AddInventoryItem(string barcode, string productName, string rubroCodigo, decimal currentStock, decimal inventoryStock, int codigoID = 0)
    {
        var existingItem = inventoryItems.FirstOrDefault(x => x.Barcode == barcode);
        if (existingItem != null)
        {
            existingItem.CurrentStock = currentStock; // Actualizar stock si ya existe
            existingItem.InventoryStock = inventoryStock; // Actualizar stock de inventario
            existingItem.CodigoID = codigoID; // Actualizar codigoID
            
            // Notificar cambio si el stock cambió
            if (existingItem.InventoryStock != inventoryStock)
            {
                await OnInventoryStockChanged.InvokeAsync((barcode, inventoryStock));
            }
        }
        else
        {
            inventoryItems.Add(new InventoryItem
            {
                Barcode = barcode,
                ProductName = productName,
                RubroCodigo = rubroCodigo,
                CurrentStock = currentStock,
                InventoryStock = inventoryStock,
                CodigoID = codigoID
            });
            
            // Notificar nuevo item
            await OnInventoryStockChanged.InvokeAsync((barcode, inventoryStock));
        }
        StateHasChanged();
    }

    private void RemoveInventoryItem(string barcode)
    {
        inventoryItems.RemoveAll(x => x.Barcode == barcode);
        StateHasChanged();
    }

    private void ClearInventory()
    {
        inventoryItems.Clear();
        StateHasChanged();
    }

    private async Task EditInventoryItem(InventoryItem item)
    {
        editingItem = item;
        editingQuantity = item.InventoryStock;
        showEditQuantityModal = true;
        Console.WriteLine($"Editando item: {item.Barcode}, Stock actual: {item.CurrentStock}, Stock inventario: {item.InventoryStock}");
        StateHasChanged();
        
        // Hacer focus y seleccionar texto en el input de nueva cantidad
        await Task.Delay(100); // Pequeño delay para asegurar que la modal se renderice
        try
        {
            await JSRuntime.InvokeVoidAsync("blazorFocusById", "editQuantity");
        }
        catch { }
    }

    private async Task OnEditQuantityKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveEditedQuantity();
        }
    }

    private async Task SaveEditedQuantity()
    {
        if (editingItem != null)
        {
            editingItem.InventoryStock = editingQuantity;
            
            // Notificar al componente padre sobre el cambio de stock
            await OnInventoryStockChanged.InvokeAsync((editingItem.Barcode, editingQuantity));
            
            showEditQuantityModal = false;
            editingItem = null;
            StateHasChanged();
        }
    }

    private async Task SendInventory()
    {
        try
        {
            isSendingInventory = true;
            inventorySentSuccessfully = false;
            StateHasChanged();

            // Obtener el token final (token dev + token usuario)
            var tokenFinal = await AuthService.GetTokenFINALAsync();
            if (string.IsNullOrEmpty(tokenFinal))
            {
                throw new Exception("No se encontró el token final de autenticación. Por favor, inicie sesión nuevamente.");
            }

            Console.WriteLine($"🔑 Token Final: {tokenFinal}");
            Console.WriteLine($"📊 Items a enviar: {inventoryItems.Count}");

            // PASO 1: Obtener el inventarioID
            var inventarioID = await ObtenerInventarioID(tokenFinal);
            Console.WriteLine($"✅ InventarioID obtenido: {inventarioID}");

            // PASO 2: Enviar la hoja adicional con los items
            await EnviarHojaAdicional(tokenFinal, inventarioID);
            
            inventorySentSuccessfully = true;
            Console.WriteLine("✅ Inventario enviado exitosamente");
            
            // Notificar al componente padre para refrescar la grilla
            await OnInventorySent.InvokeAsync();
            
            // Limpiar lista después del envío exitoso
            inventoryItems.Clear();
            
            // Cerrar modal después de 3 segundos
            await Task.Delay(3000);
            await CloseInventoryModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ EXCEPCIÓN CAPTURADA:");
            Console.WriteLine($"❌ Tipo: {ex.GetType().Name}");
            Console.WriteLine($"❌ Mensaje: {ex.Message}");
            Console.WriteLine($"❌ Stack Trace: {ex.StackTrace}");
            
            // Solo mostrar en consola, no en la interfaz
            
            // Mostrar mensaje de error al usuario
            await JSRuntime.InvokeVoidAsync("alert", $"Error enviando inventario: {ex.Message}");
        }
        finally
        {
            isSendingInventory = false;
            StateHasChanged();
        }
    }

    private async Task<int> ObtenerInventarioID(string tokenFinal)
    {
        try
        {
            // Configurar headers para la primera API
            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {tokenFinal}");
            
            // Generar Idempotency-Key con fecha y hora actual (formato más simple)
            var idempotencyKey = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "_" + DateTime.Now.Ticks.ToString();
            Http.DefaultRequestHeaders.Add("Idempotency-Key", idempotencyKey);

            Console.WriteLine($"🔑 Idempotency-Key: {idempotencyKey}");
            Console.WriteLine($"🔑 Authorization Header: Bearer {tokenFinal?.Substring(0, Math.Min(20, tokenFinal?.Length ?? 0))}...");

            // Llamar a la API de inventario para obtener el inventarioID
            var apiUrl = "https://drrsystemas4.azurewebsites.net/Operaciones/Inventario";
            Console.WriteLine($"🌐 ====== LLAMADA API 1: OBTENER INVENTARIO ID ======");
            Console.WriteLine($"🌐 URL: {apiUrl}");
            Console.WriteLine($"🌐 MÉTODO: POST");
            
            // Crear un JSON con el formato correcto para obtener inventarioID
            // Usar el DepositoID obtenido de la API de depósitos, o 4 como fallback si no está disponible
            var depositoIDParaInventario = DepositoID ?? 4;
            
            Console.WriteLine($"🏢 ====== CONFIGURACIÓN DE INVENTARIO ======");
            Console.WriteLine($"🏢 DepositoID recibido del componente padre: {DepositoID}");
            Console.WriteLine($"🏢 DepositoID que se usará para el inventario: {depositoIDParaInventario}");
            Console.WriteLine($"🏢 Nota: Si DepositoID es null, se usa 4 como valor por defecto");
            Console.WriteLine($"🕐 ====== CONFIGURACIÓN DE HORARIOS (API 1) ======");
            Console.WriteLine($"🕐 Hora local (DateTime.Now): {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            Console.WriteLine($"🕐 Hora UTC (DateTime.UtcNow): {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}");
            Console.WriteLine($"🕐 Diferencia de zona horaria: {TimeZoneInfo.Local.BaseUtcOffset}");
            Console.WriteLine($"🕐 FechaHora que se enviará en JSON: {DateTime.Now:yyyy-MM-ddTHH:mm:ss.fffZ}");
            
            var inventarioRequest = new 
            {
                fechaHora = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"), // Usar DateTime.Now para hora local en lugar de UTC
                depositoID = depositoIDParaInventario, // Usar el DepositoID dinámico en lugar del hardcodeado
                talonarioID = (int?)null,
                nroComprobante = (int?)null,
                detalle = (string?)null,
                sucursalID = (int?)null,
                sectorID = (int?)null,
                estadoID = 0
            };
            var json = JsonSerializer.Serialize(inventarioRequest);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            
            Console.WriteLine($"📤 HEADERS ENVIADOS:");
            Console.WriteLine($"📤   Authorization: Bearer {tokenFinal?.Substring(0, Math.Min(20, tokenFinal?.Length ?? 0))}...");
            Console.WriteLine($"📤   Idempotency-Key: {idempotencyKey}");
            Console.WriteLine($"📤   Content-Type: application/json");
            Console.WriteLine($"📤 JSON ENVIADO: {json}");
            Console.WriteLine($"📤 TAMAÑO DEL BODY: {json.Length} caracteres");
            
            var response = await Http.PostAsync(apiUrl, content);
            
            Console.WriteLine($"📡 ====== RESPUESTA API 1 ======");
            Console.WriteLine($"📡 Status Code: {response.StatusCode}");
            Console.WriteLine($"📡 Reason Phrase: {response.ReasonPhrase}");
            Console.WriteLine($"📡 Headers de respuesta:");
            foreach (var header in response.Headers)
            {
                Console.WriteLine($"📡   {header.Key}: {string.Join(", ", header.Value)}");
            }

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"✅ JSON RECIBIDO: {responseContent}");
                Console.WriteLine($"✅ TAMAÑO DE RESPUESTA: {responseContent.Length} caracteres");
                
                var inventarioResponse = JsonSerializer.Deserialize<InventarioResponse>(responseContent);
                
                Console.WriteLine($"🔍 DEBUG DESERIALIZACIÓN:");
                Console.WriteLine($"🔍 inventarioResponse: {inventarioResponse != null}");
                Console.WriteLine($"🔍 inventarioResponse.Status: {inventarioResponse?.Status}");
                Console.WriteLine($"🔍 inventarioResponse.Data: {inventarioResponse?.Data != null}");
                Console.WriteLine($"🔍 inventarioResponse.Data.InventarioID: {inventarioResponse?.Data?.InventarioID}");
                
                // Verificar si la API devolvió un error en el status
                if (inventarioResponse?.Status?.ToLower() == "error")
                {
                    var apiErrorMessage = !string.IsNullOrEmpty(inventarioResponse.Message) ? 
                        inventarioResponse.Message : 
                        "Error desconocido de la API";
                    
                    Console.WriteLine($"❌ API devolvió error: {inventarioResponse.Status}");
                    Console.WriteLine($"❌ Mensaje de error: {apiErrorMessage}");
                    
                    // Solo mostrar en consola, no en la interfaz
                    
                    throw new Exception($"Error de la API: {apiErrorMessage}");
                }
                
                if (inventarioResponse?.Data?.InventarioID > 0)
                {
                    return inventarioResponse.Data.InventarioID;
                }
                else
                {
                    Console.WriteLine($"❌ InventarioID no válido en la respuesta: {inventarioResponse?.Data?.InventarioID}");
                    throw new Exception("No se pudo obtener el inventarioID de la respuesta");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ ====== ERROR API 1 ======");
                Console.WriteLine($"❌ Status Code: {response.StatusCode}");
                Console.WriteLine($"❌ Reason Phrase: {response.ReasonPhrase}");
                Console.WriteLine($"❌ JSON DE ERROR: {errorContent}");
                Console.WriteLine($"❌ TAMAÑO DE ERROR: {errorContent.Length} caracteres");
                Console.WriteLine($"❌ Request Headers enviados: Authorization=Bearer..., Idempotency-Key={idempotencyKey}");
                
                throw new Exception($"Error obteniendo inventarioID: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ EXCEPCIÓN EN ObtenerInventarioID:");
            Console.WriteLine($"❌ Tipo: {ex.GetType().Name}");
            Console.WriteLine($"❌ Mensaje: {ex.Message}");
            Console.WriteLine($"❌ Stack Trace: {ex.StackTrace}");
            throw;
        }
    }

    private async Task EnviarHojaAdicional(string tokenFinal, int inventarioID)
    {
        try
        {
            Console.WriteLine($"🔄 Iniciando envío de hoja adicional con InventarioID: {inventarioID}");
            Console.WriteLine($"📊 Cantidad de items a enviar: {inventoryItems.Count}");
            
            // Preparar los datos para la hoja adicional
            var hojaAdicionalRequest = new HojaAdicionalRequest
            {
                InventarioID = inventarioID,
                Items = inventoryItems.Select(item => new HojaAdicionalItem
                {
                    CodigoID = item.CodigoID, // Usar el codigoID real del producto
                    Cantidad = item.InventoryStock,
                    FechaHora = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"), // Usar DateTime.Now para hora local en lugar de UTC
                    Detalle = null,
                    ProductoUbicacionID = null
                }).ToList()
            };

            // Serializar a JSON
            var json = JsonSerializer.Serialize(hojaAdicionalRequest, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });

            Console.WriteLine($"📦 ====== PRODUCTOS A ENVIAR ======");
            Console.WriteLine($"📦 InventarioID: {inventarioID}");
            Console.WriteLine($"📦 Cantidad de productos: {inventoryItems.Count}");
            Console.WriteLine($"🕐 ====== CONFIGURACIÓN DE HORARIOS ======");
            Console.WriteLine($"🕐 Hora local (DateTime.Now): {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            Console.WriteLine($"🕐 Hora UTC (DateTime.UtcNow): {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}");
            Console.WriteLine($"🕐 Diferencia de zona horaria: {TimeZoneInfo.Local.BaseUtcOffset}");
            Console.WriteLine($"🕐 FechaHora que se enviará en JSON: {DateTime.Now:yyyy-MM-ddTHH:mm:ss.fffZ}");
            Console.WriteLine($"📦 Lista de productos:");
            foreach (var item in inventoryItems)
            {
                Console.WriteLine($"📦   - {item.ProductName} (Código: {item.Barcode}) - CodigoID: {item.CodigoID} - Cantidad: {item.InventoryStock}");
            }
            Console.WriteLine($"📤 JSON COMPLETO HOJA ADICIONAL: {json}");

            // Configurar headers para la segunda API
            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {tokenFinal}");
            
            // Generar Idempotency-Key con fecha y hora actual (formato más simple)
            var idempotencyKey = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "_" + DateTime.Now.Ticks.ToString();
            Http.DefaultRequestHeaders.Add("Idempotency-Key", idempotencyKey);

            Console.WriteLine($"🌐 ====== LLAMADA API 2: ENVIAR HOJA ADICIONAL ======");
            Console.WriteLine($"🌐 URL: https://drrsystemas4.azurewebsites.net/Operaciones/Inventario");
            Console.WriteLine($"🌐 MÉTODO: POST");
            Console.WriteLine($"🔑 HEADERS ENVIADOS:");
            Console.WriteLine($"🔑   Authorization: Bearer {tokenFinal?.Substring(0, Math.Min(20, tokenFinal?.Length ?? 0))}...");
            Console.WriteLine($"🔑   Idempotency-Key: {idempotencyKey}");
            Console.WriteLine($"🔑   Content-Type: application/json");

            // Crear el contenido con el Content-Type correcto
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            // Enviar a la API de hoja adicional (URL correcta)
            var apiUrl = "https://drrsystemas4.azurewebsites.net/Operaciones/HojaAdicional";
            Console.WriteLine($"📤 JSON ENVIADO: {json}");
            Console.WriteLine($"📤 TAMAÑO DEL BODY: {json.Length} caracteres");
            
            var response = await Http.PostAsync(apiUrl, content);
            
            Console.WriteLine($"📡 ====== RESPUESTA API 2 ======");
            Console.WriteLine($"📡 Status Code: {response.StatusCode}");
            Console.WriteLine($"📡 Reason Phrase: {response.ReasonPhrase}");
            Console.WriteLine($"📡 Headers de respuesta:");
            foreach (var header in response.Headers)
            {
                Console.WriteLine($"📡   {header.Key}: {string.Join(", ", header.Value)}");
            }

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"✅ JSON RECIBIDO: {responseContent}");
                Console.WriteLine($"✅ TAMAÑO DE RESPUESTA: {responseContent.Length} caracteres");
                
                // Solo mostrar en consola, no en la interfaz
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ ====== ERROR API 2 ======");
                Console.WriteLine($"❌ Status Code: {response.StatusCode}");
                Console.WriteLine($"❌ Reason Phrase: {response.ReasonPhrase}");
                Console.WriteLine($"❌ JSON DE ERROR: {errorContent}");
                Console.WriteLine($"❌ TAMAÑO DE ERROR: {errorContent.Length} caracteres");
                Console.WriteLine($"❌ Request Headers enviados: Authorization=Bearer..., Idempotency-Key={idempotencyKey}");
                
                // Solo mostrar en consola, no en la interfaz
                
                throw new Exception($"Error enviando hoja adicional: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ EXCEPCIÓN EN EnviarHojaAdicional:");
            Console.WriteLine($"❌ Tipo: {ex.GetType().Name}");
            Console.WriteLine($"❌ Mensaje: {ex.Message}");
            Console.WriteLine($"❌ Stack Trace: {ex.StackTrace}");
            throw;
        }
    }

    // Clase para representar un item del inventario
    public class InventoryItem
    {
        public string Barcode { get; set; } = string.Empty;
        public string ProductName { get; set; } = string.Empty;
        public string RubroCodigo { get; set; } = string.Empty;
        public decimal CurrentStock { get; set; }
        public decimal InventoryStock { get; set; }
        public int CodigoID { get; set; } = 0;
    }

    // Clases para el modelo de datos de la API
    // Modelo para obtener el inventarioID
    public class InventarioResponse
    {
        [JsonPropertyName("status")]
        public string Status { get; set; } = string.Empty;
        
        [JsonPropertyName("message")]
        public string? Message { get; set; }
        
        [JsonPropertyName("data")]
        public InventarioData? Data { get; set; }
    }

    public class InventarioData
    {
        [JsonPropertyName("inventarioID")]
        public int InventarioID { get; set; }
    }

    // Modelo para enviar la hoja adicional
    public class HojaAdicionalRequest
    {
        public int InventarioID { get; set; }
        public List<HojaAdicionalItem> Items { get; set; } = new();
    }

    public class HojaAdicionalItem
    {
        public int CodigoID { get; set; }
        public decimal Cantidad { get; set; }
        public string FechaHora { get; set; } = string.Empty;
        public string? Detalle { get; set; }
        public int? ProductoUbicacionID { get; set; }
    }

    // Clases legacy (mantenidas para compatibilidad)
    public class InventoryRequest
    {
        public string FechaHora { get; set; } = string.Empty;
        public int? ProveedorID { get; set; }
        public string? DetalleRecepcion { get; set; }
        public int DepositoID { get; set; }
        public int TalonarioID { get; set; }
        public int NroComprobante { get; set; }
        public int? SectorID { get; set; }
        public int? SucursalID { get; set; }
        public int? ProyectoID { get; set; }
        public int? AlmaUserID { get; set; }
        public decimal? Total { get; set; }
        public int? VehiculoID { get; set; }
        public int? ConductorID { get; set; }
        public List<InventoryItemRequest> Items { get; set; } = new();
        public List<ItemNoHalladoRequest> ItemsNoHallados { get; set; } = new();
    }

    public class InventoryItemRequest
    {
        public int CodigoID { get; set; }
        public decimal Cantidad { get; set; }
        public decimal? ImporteUnidad { get; set; }
        public decimal? TotalItem { get; set; }
        public int ItemRecepcionEstadoID { get; set; }
        public string? Detalle { get; set; }
        public int? ProductoUbicacionID { get; set; }
    }

    public class ItemNoHalladoRequest
    {
        public string CodigoBarra { get; set; } = string.Empty;
        public string Descripcion { get; set; } = string.Empty;
        public decimal Cantidad { get; set; }
    }
}

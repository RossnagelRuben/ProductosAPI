@page "/DEPOSITOS"
@using BlazorApp_ProductosAPI.Models
@using BlazorApp_ProductosAPI.Services
@using BlazorApp_ProductosAPI.Components
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net.Http
@inject UbicacionService UbicacionService
@inject TreeBuilderService TreeBuilderService
@inject HttpClient Http
 
 
<style>
/* FORZAR VISIBILIDAD DE TODOS LOS INPUT - SÚPER AGRESIVO */
input,
input[type="text"],
input[type="number"],
input[type="email"],
input[type="password"],
input[type="search"],
input[type="tel"],
input[type="url"],
input.form-control,
.form-control,
.fast-number,
input.fast-number,
.form-control.fast-number,
input[class*="form-control"],
input[class*="fast-number"] {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    background-color: white !important;
    border: 2px solid #007bff !important;
    color: #000 !important;
    font-size: 14px !important;
    padding: 8px 12px !important;
    height: 38px !important;
    width: 100% !important;
    box-sizing: border-box !important;
    position: relative !important;
    z-index: 99999 !important;
    pointer-events: auto !important;
    user-select: auto !important;
    -webkit-user-select: auto !important;
    -moz-user-select: auto !important;
    -ms-user-select: auto !important;
    transition: none !important;
    -webkit-transition: none !important;
    -moz-transition: none !important;
    -o-transition: none !important;
    filter: none !important;
    -webkit-filter: none !important;
    transform: none !important;
    -webkit-transform: none !important;
    -moz-transform: none !important;
    -ms-transform: none !important;
    clip: auto !important;
    clip-path: none !important;
    -webkit-clip-path: none !important;
    mask: none !important;
    -webkit-mask: none !important;
}
</style>

@inject IJSRuntime JSRuntime
@inject ProductoService ProductoService
@inject IAuthService AuthService

<style>
    /* Estilos unificados para un layout vertical responsivo */
    .depositos-container {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        gap: 0;
    }

    .depositos-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 1.5rem;
        background: white;
        border-bottom: 1px solid #dee2e6;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        flex-wrap: wrap;
        position: sticky;
        top: 0;
    }

    .depositos-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        position: relative;
        gap: 0; /* Eliminar gap completamente */
        padding: 0; /* Eliminar padding completamente */
    }

    .main-panel {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        flex: 1;
        min-height: 0;
    }

    .left-panel {
        width: 100%;
        display: flex;
        flex-direction: column;
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        border: 1px solid #dee2e6;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        overflow: hidden;
        transition: all 0.3s ease;
        min-height: 300px;
    }

    .right-panel {
        width: 100%;
        display: flex;
        flex-direction: column;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        overflow: hidden;
        transition: all 0.3s ease;
        min-height: 300px;
    }

    .products-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1rem;
        height: 100%;
        overflow-y: auto;
    }

    .selected-location {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        border: 2px solid #007bff;
        border-radius: 12px;
        padding: 1rem;
        box-shadow: 0 4px 12px rgba(0, 123, 255, 0.15);
        transition: all 0.3s ease;
    }

    .control-buttons {
        display: flex;
        gap: 0.75rem;
        padding: 1rem;
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        flex-wrap: wrap;
        align-items: center;
        border-radius: 8px;
    }

    .filters-section {
        padding: 1rem;
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        border-radius: 8px;
    }

    .data-grid-section {
        display: flex;
        flex-direction: column;
        flex: 1;
        min-height: 0;
    }

    .grid-content {
        flex: 1;
        overflow: visible;
        min-height: 200px;
    }

    .grid-footer {
        padding: 0.5rem;
        background: #f8f9fa;
        border-top: 1px solid #dee2e6;
        text-align: center;
        border-radius: 0 0 8px 8px;
    }

    .no-selection {
        background: #f8f9fa;
        border: 2px dashed #dee2e6;
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 200px;
    }

    .no-selection i {
        font-size: 2rem;
        color: #6c757d;
        margin-bottom: 1rem;
    }

    .no-selection p {
        color: #6c757d;
        font-size: 1rem;
        margin: 0;
    }

    /* Ocultar elementos de redimensionamiento ya que no los necesitamos */
    .resize-handle {
        display: none !important;
    }

    .tree-node {
        display: block;
        cursor: pointer;
        border-radius: 8px;
        margin-bottom: 4px;
        transition: all 0.2s ease-in-out;
        outline: none;
        position: relative;
        border: 1px solid transparent;
        background: white;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .tree-node:hover {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-color: #dee2e6;
        transform: translateX(2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .tree-node.selected {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        border-color: #007bff;
        border-left: 4px solid #007bff;
        box-shadow: 0 4px 12px rgba(0, 123, 255, 0.15);
        transform: translateX(2px);
    }

    .node-content {
        display: flex;
        align-items: center;
        padding: 12px 16px;
        gap: 12px;
        min-height: 48px;
    }

    .expand-btn {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        border: 1px solid #dee2e6;
        padding: 6px;
        cursor: pointer;
        border-radius: 6px;
        transition: all 0.2s ease;
        color: #6c757d;
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .expand-btn:hover {
        background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);
        color: #343a40;
        transform: scale(1.05);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
    }

    .expand-btn.expanded {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        color: white;
        border-color: #007bff;
    }

    .expand-btn.expanded i {
        transform: rotate(90deg);
        transition: transform 0.2s ease;
    }

    .node-badge {
        font-size: 0.7rem;
        font-weight: 700;
        padding: 4px 8px;
        border-radius: 12px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        min-width: 70px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        color: white;
    }

    .badge-empresa {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        border: 1px solid #0056b3;
    }

    .badge-deposito {
        background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
        border: 1px solid #1e7e34;
    }

    .badge-zona {
        background: linear-gradient(135deg, #6f42c1 0%, #5a32a3 100%);
        border: 1px solid #5a32a3;
    }

    .badge-subzona {
        background: linear-gradient(135deg, #fd7e14 0%, #e55a00 100%);
        border: 1px solid #e55a00;
    }

    .badge-otros {
        background: linear-gradient(135deg, #6c757d 0%, #545b62 100%);
        border: 1px solid #545b62;
    }

    .node-text {
        flex: 1;
        font-weight: 600;
        font-size: 0.95rem;
        line-height: 1.4;
        padding: 4px 0;
        border-radius: 6px;
        padding: 8px 12px;
        margin-left: 8px;
        transition: all 0.2s ease;
    }

    /* Colores por nivel para el texto */
    .tree-node[data-level="0"] .node-text {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        color: #0056b3;
        border: 1px solid #90caf9;
    }

    .tree-node[data-level="1"] .node-text {
        background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
        color: #1e7e34;
        border: 1px solid #a5d6a7;
    }

    .tree-node[data-level="2"] .node-text {
        background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);
        color: #5a32a3;
        border: 1px solid #ce93d8;
    }

    .tree-node[data-level="3"] .node-text {
        background: linear-gradient(135deg, #fff3e0 0%, #ffcc80 100%);
        color: #e55a00;
        border: 1px solid #ffb74d;
    }

    .tree-node[data-level="4"] .node-text {
        background: linear-gradient(135deg, #f5f5f5 0%, #e0e0e0 100%);
        color: #545b62;
        border: 1px solid #bdbdbd;
    }

    .node-children {
        margin-left: 24px;
        position: relative;
        padding-left: 16px;
    }

    .node-children::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 2px;
        background: linear-gradient(to bottom, #dee2e6, transparent);
    }

    .right-panel {
        width: 65%;
        display: flex;
        flex-direction: column;
        background: white;
    }

    .filters-content {
        padding: 1rem;
        max-height: 50vh;
        overflow-y: auto;
        transition: all 0.3s ease;
    }

    .filters-content.collapsed {
        max-height: 0;
        padding: 0 1rem;
        overflow: hidden;
    }

    /* Estilos para pantallas grandes (desktop) */
    @@media (min-width: 769px) {
        .depositos-header {
            flex-direction: row !important;
            flex-wrap: nowrap !important;
            justify-content: space-between !important;
            align-items: center !important;
        }
        
        .header-right {
            display: flex !important;
            align-items: center !important;
            gap: 1rem !important;
            flex-wrap: nowrap !important;
            flex-shrink: 0 !important;
        }
        
        .token-section {
            display: flex !important;
            align-items: center !important;
            gap: 0.5rem !important;
            flex-shrink: 0 !important;
        }
        
        .load-btn {
            flex-shrink: 0 !important;
            white-space: nowrap !important;
        }
        
        .panel-toggle {
            flex-shrink: 0 !important;
            white-space: nowrap !important;
        }

        .depositos-content {
            flex-direction: row !important;
            height: calc(100vh - 80px) !important;
        }

        .main-panel {
            flex-direction: row !important;
            gap: 1rem !important;
        }

        .left-panel {
            width: 40% !important;
            min-width: 350px !important;
            max-width: 50% !important;
            height: 100% !important;
        }

        .right-panel {
            width: 60% !important;
            min-width: 400px !important;
            height: 100% !important;
        }

        /* Cuando no hay ubicación seleccionada, el panel izquierdo ocupa todo el espacio */
        .main-panel:has(.left-panel:only-child) .left-panel {
            width: 100% !important;
            max-width: 100% !important;
        }

        .products-container {
            padding: 1rem !important;
            gap: 1rem !important;
        }
    }

    /* Responsive Design - Mobile First Approach */
    @@media (max-width: 1200px) {
        .depositos-header {
            flex-direction: row;
            gap: 1rem;
            padding: 1rem;
            flex-wrap: nowrap;
        }
        
        .header-right {
            width: auto;
            justify-content: flex-end;
            flex-wrap: nowrap;
        }
        
        .token-section {
            flex-shrink: 0;
            min-width: 0;
        }
        
        .token-input {
            width: 180px;
            min-width: 150px;
        }
    }

    @@media (max-width: 992px) {
        .depositos-header {
            flex-direction: row;
            flex-wrap: nowrap;
            gap: 0.75rem;
        }
        
        .header-right {
            flex-wrap: nowrap;
            gap: 0.75rem;
        }
        
        .token-input {
            width: 160px;
            min-width: 120px;
        }
        
        .left-panel {
            width: 40%;
            min-width: 280px;
        }
        
        .right-panel {
            width: 60%;
        }
    }

    @@media (max-width: 768px) {
        .depositos-container {
            min-height: 100vh;
            overflow: auto;
        }

        .depositos-header {
            padding: 1rem;
            flex-direction: row;
            gap: 1rem;
            position: sticky;
            top: 0;
            z-index: 1001;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            border-radius: 0 0 16px 16px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            margin-bottom: 8px;
            align-items: center;
        }

        .page-title {
            font-size: 1.25rem;
            text-align: center;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .token-section {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        .token-input {
            width: 250px;
            min-width: 200px;
            font-size: 16px; /* Prevents zoom on iOS */
            border-radius: 10px;
            border: 2px solid #e9ecef;
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .token-input:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
            transform: translateY(-1px);
        }

        .load-btn {
            padding: 0.75rem 1.5rem;
            font-size: 0.95rem;
            border-radius: 12px;
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            border: none;
            box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
            transition: all 0.3s ease;
            font-weight: 600;
            white-space: nowrap;
        }

        .load-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
        }

        .panel-toggle {
            position: static;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            white-space: nowrap;
            border-radius: 8px;
        }

        .depositos-content {
            flex-direction: column;
            height: auto;
            overflow: visible;
        }

        .left-panel {
            width: 100% !important;
            height: calc(100vh - 100px) !important;
            min-height: calc(100vh - 100px) !important;
            max-height: calc(100vh - 100px) !important;
            resize: none;
            border-right: none;
            border-bottom: none;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            border-radius: 12px;
            margin: 8px;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        }

        .right-panel:not(.show-on-mobile) {
            display: none !important;
            width: 0 !important;
            height: 0 !important;
            overflow: hidden !important;
        }

        .resize-handle {
            display: none;
        }

        .panel-header {
            padding: 1.5rem;
            margin: 0;
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            border-radius: 12px 12px 0 0;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .search-input-group {
            flex-direction: row;
            gap: 0.5rem;
            align-items: center;
        }

        .search-input {
            font-size: 16px; /* Prevents zoom on iOS */
            border-radius: 10px;
            border: 2px solid #e9ecef;
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            flex: 1;
        }

        .search-input:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
            transform: translateY(-1px);
        }

        .tree-controls {
            flex-direction: column;
            gap: 0.75rem;
            align-items: stretch;
        }

        .tree-controls .btn {
            width: 100%;
            padding: 1rem;
            font-size: 0.95rem;
            margin-bottom: 0.5rem;
            border-radius: 10px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .tree-controls .btn:hover:not(:disabled) {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .node-content {
            padding: 10px 12px;
            min-height: 44px; /* Touch-friendly minimum */
        }

        .expand-btn {
            width: 32px;
            height: 32px;
            min-width: 32px;
            min-height: 32px;
        }

        .node-text {
            font-size: 0.9rem;
            line-height: 1.3;
        }

        .filters-content {
            max-height: none;
            padding: 0.75rem;
        }

        .filter-group {
            margin-bottom: 1.25rem;
        }

        .input-group {
            flex-direction: column;
            gap: 0.5rem;
        }

        .input-group .form-control,
        .input-group .form-select {
            width: 100%;
            font-size: 16px; /* Prevents zoom on iOS */
            padding: 0.75rem;
        }

        .input-group-text {
            justify-content: center;
            padding: 0.75rem;
        }

        .filter-checkboxes {
            gap: 0.75rem;
        }

        .form-check {
            padding: 0.5rem;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #dee2e6;
        }

        .form-check-input {
            width: 14px;
            height: 14px;
        }

        .form-check-label {
            font-size: 0.95rem;
            line-height: 1.4;
        }

        .grid-columns {
            grid-template-columns: 1fr;
            gap: 0;
        }

        .grid-column {
            padding: 0.75rem;
            font-size: 0.9rem;
            border-bottom: 1px solid #dee2e6;
            text-align: left;
        }

        .grid-column:before {
            content: attr(data-label) ": ";
            font-weight: 600;
            color: #6c757d;
        }

        .empty-grid {
            height: 150px;
            padding: 1rem;
        }

        .empty-grid i {
            font-size: 2rem;
        }

        .empty-grid p {
            font-size: 0.9rem;
            text-align: center;
        }
    }

    @@media (max-width: 576px) {
        .depositos-header {
            padding: 0.5rem;
        }

        .page-title {
            font-size: 1.1rem;
        }

        .left-panel {
            height: 40vh;
            min-height: 250px;
        }

        .right-panel {
            height: 60vh;
            min-height: 300px;
        }

        .panel-header {
            padding: 0.75rem;
            margin: 2px;
        }

        .node-content {
            padding: 8px 10px;
            gap: 8px;
        }

        .node-text {
            font-size: 0.85rem;
        }

        .node-badge {
            font-size: 0.65rem;
            padding: 3px 6px;
            min-width: 60px;
        }

        .filters-title {
            font-size: 1.1rem;
        }

        .filter-group label {
            font-size: 0.9rem;
        }

        .grid-column {
            padding: 0.5rem;
            font-size: 0.85rem;
        }
    }

    @@media (max-width: 768px) {
        .depositos-header {
            flex-direction: row !important;
            gap: 0.5rem !important;
            padding: 0.75rem !important;
            flex-wrap: wrap !important;
            align-items: center !important;
        }
        
        /* Ocultar título en pantallas pequeñas para ahorrar espacio */
        .page-title {
            display: none !important;
        }
        
        .header-right {
            width: auto !important;
            justify-content: flex-end !important;
            flex-direction: row !important;
            gap: 0.5rem !important;
            flex: 1 !important;
            flex-wrap: wrap !important;
        }
        
        /* Ocultar token en pantallas muy pequeñas */
        .token-section {
            display: none !important;
        }
        
        .token-input {
            width: 120px !important;
            min-width: 100px !important;
            font-size: 0.8rem !important;
            padding: 0.4rem 0.5rem !important;
        }
        
        .load-btn {
            width: auto !important;
            padding: 0.4rem 0.75rem !important;
            font-size: 0.8rem !important;
            white-space: nowrap !important;
        }
        
        .panel-toggle {
            padding: 0.4rem 0.5rem !important;
            font-size: 0.75rem !important;
            white-space: nowrap !important;
        }
    }

    @@media (max-width: 480px) {
        .depositos-header {
            flex-direction: row !important;
            gap: 0.25rem !important;
            padding: 0.5rem !important;
            flex-wrap: wrap !important;
            align-items: center !important;
        }

        .page-title {
            font-size: 0.9rem !important;
            flex-shrink: 0 !important;
        }

        .header-right {
            width: auto !important;
            justify-content: flex-end !important;
            flex-direction: row !important;
            gap: 0.25rem !important;
            flex: 1 !important;
            flex-wrap: wrap !important;
        }

        .token-section {
            flex-direction: row !important;
            align-items: center !important;
            gap: 0.25rem !important;
            flex-shrink: 0 !important;
        }

        .token-input {
            width: 100px !important;
            min-width: 80px !important;
            font-size: 0.75rem !important;
            padding: 0.3rem 0.4rem !important;
        }

        .load-btn {
            width: auto !important;
            padding: 0.3rem 0.5rem !important;
            font-size: 0.75rem !important;
            white-space: nowrap !important;
        }

        .panel-toggle {
            padding: 0.3rem 0.4rem !important;
            font-size: 0.7rem !important;
            white-space: nowrap !important;
        }

        .left-panel {
            height: 35vh;
            min-height: 200px;
        }

        .right-panel {
            height: 65vh;
            min-height: 250px;
        }

        .node-content {
            padding: 6px 8px;
            min-height: 40px;
        }

        .expand-btn {
            width: 28px;
            height: 28px;
            min-width: 28px;
            min-height: 28px;
        }

        .node-text {
            font-size: 0.8rem;
        }

        .node-badge {
            font-size: 0.6rem;
            padding: 2px 4px;
            min-width: 50px;
        }
    }

    /* Landscape orientation for mobile */
    @@media (max-width: 768px) and (orientation: landscape) {
        .depositos-content { overflow: auto; }
        .left-panel { height: auto; max-height: none; }
        .right-panel { display: flex !important; width: 100% !important; height: auto; }
    }

    /* Estilos responsivos para el contenedor unificado de productos */
    @@media (max-width: 768px) {
        .products-container {
            padding: 0.5rem !important;
            gap: 0.75rem !important;
        }

        .selected-location {
            padding: 0.75rem !important;
            margin: 0 !important;
        }

        .control-buttons {
            padding: 0.75rem !important;
            flex-direction: column !important;
            align-items: stretch !important;
        }

        .filters-section {
            padding: 0.75rem !important;
        }

        .data-grid-section {
            min-height: 200px !important;
        }

        .no-selection {
            padding: 1.5rem !important;
            min-height: 150px !important;
        }

        /* En móviles, cuando no hay ubicación seleccionada, el panel izquierdo ocupa todo el espacio */
        .main-panel:has(.left-panel:only-child) .left-panel {
            width: 100% !important;
            max-width: 100% !important;
        }
    }

    /* Touch-friendly improvements */
    @@media (hover: none) and (pointer: coarse) {
        .tree-node {
            min-height: 44px;
        }

        .expand-btn {
            min-width: 44px;
            min-height: 44px;
        }

        .btn {
            min-height: 44px;
            padding: 0.75rem 1rem;
        }

        .form-control,
        .form-select {
            min-height: 44px;
        }
    }

    /* Panel toggle buttons - solo para botones flotantes */
    .panel-toggle.floating {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1001;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        padding: 8px 12px;
        cursor: pointer;
        font-size: 0.8rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    /* Panel toggle buttons en el header */
    .header-right .panel-toggle {
        position: static;
        background: #6c757d;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        color: white;
        font-weight: 500;
        white-space: nowrap;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .panel-toggle.floating:hover {
        background: #f8f9fa;
        border-color: #007bff;
    }
    
    .header-right .panel-toggle:hover {
        background: #5a6268;
        transform: translateY(-1px);
    }

    .panel-hidden {
        display: none !important;
    }

    /* Mobile-specific styles */
    .title-text {
        display: inline;
    }

    .token-label {
        font-weight: 500;
        margin: 0;
        color: #495057;
        display: block;
        white-space: nowrap;
    }

    .btn-text {
        display: inline;
    }

    .toggle-text {
        display: inline;
    }

    .header-right {
        display: flex;
        align-items: center;
        gap: 1rem;
        flex-wrap: nowrap;
    }

    .token-section {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .token-input {
        width: 200px;
        border-radius: 10px;
        border: 2px solid #e9ecef;
        padding: 0.5rem 0.75rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
    }

    .token-input:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
        outline: none;
    }

    .load-btn {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        border: none;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.3s ease;
        color: white;
        white-space: nowrap;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .load-btn:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
    }

    .load-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .header-right .panel-toggle[style*="background: #28a745"] {
        background: #28a745 !important;
    }

    .header-right     .panel-toggle[style*="background: #28a745"]:hover {
        background: #218838 !important;
        transform: translateY(-1px);
    }

    /* Estilos para el modal de configuración de columnas */
    .column-config-content {
        padding: 1rem;
    }

    .column-list {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 0.5rem;
    }

    .column-item {
        padding: 0.75rem;
        border-bottom: 1px solid #f8f9fa;
        transition: background-color 0.2s ease;
    }

    .column-item:hover {
        background-color: #f8f9fa;
    }

    .column-item:last-child {
        border-bottom: none;
    }

    .column-item .form-check-input {
        margin-right: 0.75rem;
    }

    .column-item .form-check-label {
        font-weight: 500;
        cursor: pointer;
        margin: 0;
    }

    /* Mobile optimizations */
    @@media (max-width: 768px) {
        .title-text {
            display: none;
        }

        .page-title i {
            font-size: 1.5rem;
        }

        .token-label {
            font-size: 0.9rem;
        }

        .btn-text {
            display: none;
        }

        .load-btn i {
            font-size: 1.2rem;
        }

        .toggle-text {
            display: none;
        }

        .panel-toggle {
            padding: 8px;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            justify-content: center;
        }

        .panel-toggle i {
            font-size: 1.1rem;
        }
    }

    @@media (max-width: 480px) {
        .page-title {
            font-size: 1rem;
        }

        .panel-toggle {
            width: 36px;
            height: 36px;
            padding: 6px;
        }

        .panel-toggle i {
            font-size: 1rem;
        }
    }

    /* Improved touch targets */
    .tree-node {
        -webkit-tap-highlight-color: transparent;
        user-select: none;
    }

    .btn {
        -webkit-tap-highlight-color: transparent;
        user-select: none;
    }

    /* Better scrolling on mobile */
    .tree-content,
    .filters-content {
        -webkit-overflow-scrolling: touch;
        overscroll-behavior: contain;
    }

    /* Prevent horizontal scroll */
    .depositos-container {
        overflow-x: hidden;
    }

    /* Show products panel on mobile when selected */
    @@media (max-width: 768px) {
        .mobile-hidden {
            display: none !important;
        }
        
        .mobile-hidden.show-on-mobile {
            display: flex !important;
            width: 100% !important;
            height: calc(100vh - 100px) !important;
            min-height: calc(100vh - 100px) !important;
            max-height: calc(100vh - 100px) !important;
            background: white !important;
            border-radius: 12px !important;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;
            margin: 8px !important;
            flex-direction: column !important;
            overflow: hidden !important;
            position: fixed !important;
            top: 100px !important;
            left: 0 !important;
            right: 0 !important;
            z-index: 1000 !important;
        }
        
        /* Asegurar que la grilla sea visible en móviles */
        .mobile-hidden.show-on-mobile .data-grid-container {
            height: 100% !important;
            min-height: 100% !important;
            max-height: 100% !important;
            display: flex !important;
            flex-direction: column !important;
        }
        
        .mobile-hidden.show-on-mobile .data-grid-content {
            flex: 1 !important;
            height: auto !important;
            min-height: 0 !important;
            max-height: none !important;
            overflow-y: auto !important;
        }
        
        /* Asegurar que el contenido del panel de productos sea visible */
        .right-panel.show-on-mobile .selected-location,
        .right-panel.show-on-mobile .control-buttons,
        .right-panel.show-on-mobile .filters-section,
        .right-panel.show-on-mobile .data-grid-section {
            display: block !important;
            visibility: visible !important;
            opacity: 1 !important;
        }
        
        /* Asegurar que la grilla sea visible */
        .right-panel.show-on-mobile .grid-content {
            display: block !important;
            visibility: visible !important;
            opacity: 1 !important;
            height: auto !important;
            max-height: none !important;
            overflow: visible !important;
        }
        
        /* Asegurar que las filas de la grilla sean visibles */
        .right-panel.show-on-mobile .grid-columns {
            display: grid !important;
            visibility: visible !important;
            opacity: 1 !important;
        }
    }

    /* Ocultar completamente la barra divisoria cuando productos está oculto */
    .resize-handle.hidden {
        display: none !important;
        width: 0 !important;
        height: 0 !important;
        overflow: hidden !important;
        visibility: hidden !important;
        opacity: 0 !important;
        pointer-events: none !important;
    }

    /* Ocultar handle cuando cualquier panel está oculto */
    .left-panel.panel-hidden ~ .resize-handle,
    .right-panel.panel-hidden ~ .resize-handle,
    .left-panel[style*="display: none"] ~ .resize-handle,
    .right-panel[style*="display: none"] ~ .resize-handle {
        display: none !important;
        width: 0 !important;
        height: 0 !important;
        overflow: hidden !important;
        visibility: hidden !important;
        opacity: 0 !important;
        pointer-events: none !important;
    }

    /* Mostrar handle solo cuando ambos paneles están visibles */
    .left-panel:not(.panel-hidden):not([style*="display: none"]) ~ .resize-handle,
    .right-panel:not(.panel-hidden):not([style*="display: none"]) ~ .resize-handle {
        display: block !important;
        width: 4px !important;
        height: 100% !important;
        overflow: visible !important;
        visibility: visible !important;
        opacity: 1 !important;
        pointer-events: auto !important;
    }

    /* Asegurar que los paneles ocupen 100% cuando el otro está oculto */
    .left-panel.panel-hidden ~ .right-panel {
        width: 100% !important;
        flex: 1 !important;
        min-width: 100% !important;
        max-width: 100% !important;
    }

    .right-panel.panel-hidden ~ .left-panel {
        width: 100% !important;
        flex: 1 !important;
        min-width: 100% !important;
        max-width: 100% !important;
    }

    /* Estilos para redimensionar columnas */
    .grid-header .grid-columns {
        display: grid;
        grid-template-columns: 1fr 2fr 1fr 1fr 1fr;
        gap: 1px;
        background: #dee2e6;
    }
    
    .grid-header .grid-column {
        background: #f8f9fa;
        padding: 0.75rem;
        font-weight: 600;
        color: #495057;
        border-right: 1px solid #dee2e6;
        position: relative;
        cursor: col-resize;
        user-select: none;
    }
    
    .grid-header .grid-column:hover {
        background: #e9ecef;
    }
    
    .grid-header .grid-column::after {
        content: '';
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        background: transparent;
        cursor: col-resize;
    }
    
    .grid-header .grid-column:hover::after {
        background: #007bff;
    }
    
    .grid-row .grid-columns {
        display: grid;
        grid-template-columns: 1fr 2fr 1fr 1fr 1fr;
        gap: 1px;
        background: #dee2e6;
    }
    
    .grid-row .grid-column {
        background: white;
        padding: 0.75rem;
        border-right: 1px solid #dee2e6;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    /* Mobile-specific grid improvements */
    @@media (max-width: 768px) {
        .grid-columns {
            display: block;
        }

        .grid-column {
            display: block;
            width: 100%;
            border-bottom: 1px solid #dee2e6;
            padding: 0.75rem;
            margin-bottom: 0.5rem;
            background: #f8f9fa;
            border-radius: 6px;
        }

        .grid-column:before {
            content: attr(data-label) ": ";
            font-weight: 600;
            color: #6c757d;
            display: block;
            margin-bottom: 0.25rem;
        }
    }
</style>

<AuthorizeView>
<div class="depositos-container">
    <!-- Header -->
        <div class="depositos-header"
             style="background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            border-radius: 0;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            margin: 0;
            padding: 1rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 1rem;
            position: sticky;
            top: 0;
            z-index: 1001;">

            <!-- Título -->
            <h2 class="page-title" style="margin: 0; display: flex; align-items: center; gap: 0.5rem;">
                <span class="title-text">Stock por ubicación:</span>
            </h2>

            <!-- Contenedor para input + botón -->
            <div style="display: flex; align-items: center; width: 100%; gap: 0.5rem;">
                <!-- Textbox de código de barras -->
                <input id="barcodeInput"
                       class="form-control"
                       style="flex: 1; height: 38px;"
                       placeholder="Escanear código de barras..."
                       @bind="barcodeInput"
                       @bind:event="oninput"
                       @onkeypress="OnBarcodeKeyPress"
                       @onfocus="OnBarcodeFocus"
                       @onblur="OnBarcodeBlur"
                       inputmode="numeric" />

                <!-- Botón QR -->
                <button class="btn btn-outline-success"
                        @onclick="AbrirQRScanner"
                        title="Escanear QR de ubicación"
                        style="width: 48px; height: 38px; display: flex; align-items: center; justify-content: center; padding: 0;">
                    <i class="oi oi-camera-slr"></i>
                </button>
            </div>
        </div>


        <!-- Main Content -->
        <div class="depositos-content">
            <!-- Panel principal unificado -->
            <div class="main-panel">
                <!-- Left Panel - Tree -->
                <div class="left-panel @(leftPanelHidden ? "panel-hidden" : "")">

            
            <div class="tree-panel">
                <div class="tree-container">
@*                     <div class="tree-header">
                        <div class="tree-controls">
                            <span class="node-count">Nodos: @VisibleNodeCount</span>
                        </div>
                    </div> *@
                    
                    <div class="tree-content">
                        @if (isLoading)
                        {
                            <div class="loading-skeleton">
                                <div class="skeleton-item"></div>
                                <div class="skeleton-item"></div>
                                <div class="skeleton-item"></div>
                            </div>
                        }
                        else if (rootNodes?.Any() == true)
                        {
                            @foreach (var node in rootNodes.Where(n => n.IsVisible))
                            {
                                <TreeNodeComponent Node="node" OnNodeSelected="OnNodeSelected" />
                            }
                        }
                        else
                        {
                            <div class="empty-state">
                                <p>No hay ubicaciones cargadas</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
                </div>

                <!-- Right Panel - Products (solo visible cuando hay ubicación seleccionada) -->
                @if (selectedNode != null)
                {
                    <div class="right-panel @(rightPanelHidden ? "panel-hidden" : "") show-on-mobile">
                        <!-- Contenedor unificado de productos con alineación vertical -->
                        <div class="products-container">
                            <!-- Botón Volver - Solo visible en móviles -->
@*                             <div class="d-block d-md-none mb-3">
                                <button @onclick="VolverAUbicaciones" 
                                        class="btn btn-outline-secondary btn-sm">
                                    <i class="oi oi-arrow-left"></i> Volver a ubicaciones
                                </button>
                            </div> *@
                            
                            <!-- Ubicación seleccionada -->
                            <div class="selected-location @(ubicacionCollapsed ? "collapsed" : "")">
                    @if (ubicacionCollapsed)
                    {
                        <!-- Vista colapsada: una sola línea horizontal -->
                        <div style="display: flex !important; align-items: center !important; justify-content: space-between !important; gap: 1rem !important;">
                            <div style="display: flex !important; align-items: center !important; gap: 0.5rem !important; flex: 1 !important; min-width: 0 !important;">
                                <i class="oi oi-location" style="color: #007bff !important; font-size: 1rem !important; flex-shrink: 0 !important;"></i>
                                <span style="color: #0056b3 !important; font-weight: 600 !important; font-size: 0.9rem !important; white-space: nowrap !important; overflow: hidden !important; text-overflow: ellipsis !important;">
                                    @GetLocationPath(selectedNode)
                                </span>
                            </div>
                            <button @onclick="ToggleUbicacionCollapse" 
                                    class="btn btn-sm btn-outline-primary"
                                    style="font-size: 0.75rem !important; padding: 0.25rem 0.5rem !important; flex-shrink: 0 !important;">
                                <i class="oi oi-chevron-down"></i>
                                Expandir
                            </button>
                        </div>
                    }
                    else
                    {
                        <!-- Vista expandida: diseño original -->
                        <div style="display: flex !important; align-items: center !important; justify-content: space-between !important; margin-bottom: 0.5rem !important;">
                            <div style="display: flex !important; align-items: center !important; gap: 0.5rem !important;">
                                <i class="oi oi-location" style="color: #007bff !important; font-size: 1.2rem !important;"></i>
                                <strong style="color: #0056b3 !important; font-size: 1.1rem !important;">Ubicación seleccionada:</strong>
                            </div>
                            <button @onclick="ToggleUbicacionCollapse" 
                                    class="btn btn-sm btn-outline-primary"
                                    style="font-size: 0.8rem !important; padding: 0.25rem 0.5rem !important;">
                                <i class="oi oi-chevron-up"></i>
                                Colapsar
                            </button>
                        </div>
                        <div class="location-path" style="background: white !important; padding: 0.75rem !important; border-radius: 8px !important; border: 1px solid #90caf9 !important; font-weight: 600 !important; color: #0056b3 !important; font-size: 1rem !important; line-height: 1.4 !important;">
                            @GetLocationPath(selectedNode)
                        </div>
                        <!-- Debug info -->
                        <div style="font-size: 0.8rem; color: #666; margin-top: 0.5rem;">
                            Debug: @selectedNode.Item.Descripcion (Nivel: @selectedNode.Level) | ID: @selectedNode.Item.ProductoUbicacionID | Orden: @selectedNode.Item.Orden
                        </div>
                        <div style="font-size: 0.7rem; color: #999; margin-top: 0.25rem;">
                            selectedNode != null: @(selectedNode != null) | selectedNode.Item != null: @(selectedNode?.Item != null)
                        </div>
                        <div style="font-size: 0.7rem; color: #ff0000; margin-top: 0.25rem; font-weight: bold;">
                            RENDERIZANDO: @selectedNode.Item.Descripcion (Level: @selectedNode.Level)
                        </div>
                    }
                            </div>
                            
                            <!-- Botones de control -->
                            

@*                     <button id="filtersToggleButton" @onclick="ToggleFilters" class="btn btn-sm btn-outline-secondary">
                        <i class="oi @(filtersExpanded ? "oi-chevron-up" : "oi-chevron-down")"></i>
                        @(filtersExpanded ? "Contraer filtros" : "Expandir filtros")
                    </button> *@

                    
                    <!-- Indicador de filtro activo con controles -->
                    @if (!string.IsNullOrWhiteSpace(filtroRubro))
                    {
                        <div class="filter-indicator" style="background: #d1ecf1; color: #0c5460; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.8rem; border: 1px solid #bee5eb; display: flex; align-items: center; gap: 0.5rem;">
                            <i class="oi oi-filter"></i>
                            <strong>@filtroRubro</strong>
                            @if (incluirSubRubros)
                            {
                                <span class="text-muted">+ sub-rubros</span>
                            }
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => { filtroRubro = string.Empty; _cachedCodigosRubro.Clear(); }" style="padding: 0.125rem 0.25rem; font-size: 0.7rem;">
                                <i class="oi oi-x"></i>
                            </button>
                        </div>
                        
                        <!-- Checkbox incluir sub-rubros (solo visible cuando hay rubro seleccionado) -->
                        <div class="form-check" style="margin: 0; display: flex; align-items: center; gap: 0.25rem;">
                            <input class="form-check-input" type="checkbox" @bind="incluirSubRubros" id="incluirSubRubros" />
                            <label class="form-check-label" for="incluirSubRubros" style="font-size: 0.8rem; margin: 0; white-space: nowrap;">
                                Incluir sub-rubros
                            </label>
                        </div>
                    }
                    
                            

                            <!-- Filtros internos -->
                            @if (filtersExpanded)
                            {
                                <div class="filters-section">
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label">Descripción</label>
                                <div class="input-group">
                                    <input class="form-control" placeholder="Filtrar por descripción..." @oninput="OnFiltroTextoInput" />
                                    <button class="btn btn-outline-secondary" @onclick="() => { filtroTexto = string.Empty; }">
                                        <i class="oi oi-x"></i>
                                    </button>
                                    <button class="btn btn-outline-primary" @onclick="OnAddUbicacionClick" title="Agregar (+)">
                                        <i class="oi oi-plus"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Rubro / Familia</label>
                                <div class="input-group">
                                    <input class="form-control" placeholder="Seleccione rubro/familia" value="@filtroRubro" disabled />
                                    <button class="btn btn-outline-primary" @onclick="AbrirModalFamilias" disabled="@isModalLoading">
                                        @if (isModalLoading)
                                        {
                                            <span class="spinner-border spinner-border-sm me-1"></span>
                                        }
                                        <i class="oi oi-magnifying-glass"></i>
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="() => { filtroRubro = string.Empty; _cachedCodigosRubro.Clear(); }">
                                        <i class="oi oi-x"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                                </div>
                            }

                            <!-- Sección de grilla de datos -->
                            <div class="data-grid-section">


                    <!-- Grilla -->
                    <div class="grid-content" style="overflow-y: auto; overflow-x: hidden;">
                        @if (selectedProductsCount == 0 && !isLoading)
                        {
                            <div class="empty-grid">
                                <i class="oi oi-table"></i>
                                <p>No hay productos para esta ubicación</p>
                            </div>
                        }
                        else
                        {
                            <!-- CONTROLES DE PAGINACIÓN COMPLETAMENTE ELIMINADOS EN MÓVILES -->
                            @if (selectedProductsCount > 100)
                            {
                                <!-- PAGINACIÓN SOLO EN PANTALLAS GRANDES - COMPLETAMENTE OCULTA EN MÓVILES -->
                                <div class="d-none d-md-flex" style="justify-content: space-between; align-items: center; padding: 0.5rem; background: #f8f9fa; border-bottom: 1px solid #dee2e6;">
                                    <div>
@*                                         <button id="inventarioButton" class="btn btn-sm btn-success" disabled="@isTogglingInventory" @onclick="ToggleInventario">
                                            @if (isTogglingInventory)
                                            {
                                                <span class="spinner-border spinner-border-sm me-1"></span>
                                            }
                                            <i class="oi oi-check"></i> @(inventarioEditable ? "Finalizar inventario" : "Realizar inventario")
                                        </button> *@
                                        <button class="btn btn-sm btn-outline-primary" @onclick="ToggleVirtualization">
                                            <i class="oi @(_useVirtualization ? "oi-eye" : "oi-eye")"></i>
                                            @(_useVirtualization ? "Ver todos" : "Paginación")
                                        </button>
                                        <span class="ms-2 text-muted">
                                            @if (_useVirtualization)
                                            {
                                                <text>Página @(_currentPage + 1) de @_totalPages (@selectedProductsCount registros)</text>
                                            }
                                            else
                                            {
                                                <text>@selectedProductsCount registros</text>
                                            }
                                        </span>
                                    </div>
                                    @if (_useVirtualization)
                                    {
                                        <div class="pagination-buttons">
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="PreviousPage" disabled="@(_currentPage == 0)">
                                                <i class="oi oi-chevron-left"></i>
                                            </button>
                                            <span class="mx-2">@(_currentPage + 1) / @_totalPages</span>
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="NextPage" disabled="@(_currentPage >= _totalPages - 1)">
                                                <i class="oi oi-chevron-right"></i>
                                            </button>
                                        </div>
                                    }
                                </div>
                            }

                            <!-- Usar el componente DataGrid reutilizable -->
                            <DataGrid @ref="dataGridRef"
                                Title="Productos:"
                                Data="@GetProductosForGrid()"
                                Columns="@GetProductoColumns()"
                                IsLoading="@isLoading"
                                LoadingText="Cargando productos..."
                                EmptyText="No hay productos para esta ubicación"
                                ShowRefreshButton="false"
                                GetValueFunction="@GetProductoValue"
                                OnRowClick="@OnProductoSelected"
                                OnInventoryStockChanged="@OnInventoryStockChanged"
                                OnInventorySent="@OnInventorySent"
                                DepositoID="@depositoIDActual" />
                            
                            }
                        </div>
                        
                        <!-- Footer eliminado - ahora está dentro del DataGrid -->
                            </div>
                        
                    </div>
                </div>
                }
        </div>

        <!-- Error Banner -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-banner">
                <i class="oi oi-warning"></i>
                <span>@errorMessage</span>
                <button @onclick="() => errorMessage = string.Empty" class="btn-close">
                    <i class="oi oi-x"></i>
                </button>
            </div>
        }
    </div>
</div>

<!-- Modal: Rubro / Familia -->
<AppModal IsOpen="showRubroModal" Title="Buscar Rubro / Familia" OnClose="() => showRubroModal = false">
    <ChildContent>
        <input class="modal-input" placeholder="Filtrar rubro/familia..." @bind="filtroRubroBuscar" @bind:event="oninput" />
        <div class="modal-list" style="max-height: 400px; overflow-y: auto;">
            @if (isModalLoading)
            {
                <div class="text-center p-3">
                    <span class="spinner-border spinner-border-sm me-2"></span>
                    Cargando familias...
                </div>
            }
            else
            {
                @foreach (var familia in GetFamiliasFiltradas())
                {
                    <div class="modal-item" @onclick="async () => await SeleccionarFamilia(familia)" 
                         style="padding: 0.75rem; border-bottom: 1px solid #eee; cursor: pointer; transition: background-color 0.2s;">
                        <div style="font-weight: 600; color: #333;">@familia.Descripcion</div>
                    </div>
                }
            }
        </div>
    </ChildContent>
    <FooterContent>
        <button class="btn" @onclick="() => showRubroModal = false">Cerrar</button>
    </FooterContent>
</AppModal>

<!-- Modal: Configuración de Columnas - SIN BOTONES EN FOOTER -->
<AppModal IsOpen="showColumnConfigModal" Title="Configurar Columnas" OnClose="() => showColumnConfigModal = false">
    <ChildContent>
        <div class="column-config-content">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <p class="text-muted mb-0">Selecciona qué columnas mostrar en la grilla de productos. Los cambios se guardan automáticamente:</p>
                <button class="btn btn-sm btn-outline-secondary" @onclick="ResetColumnConfig" title="Restaurar configuración por defecto">
                    <i class="oi oi-reload"></i> Restaurar por defecto
                </button>
            </div>
            <div class="column-list">
                @foreach (var column in availableColumns)
                {
                    <div class="form-check column-item">
                        <input class="form-check-input" 
                               type="checkbox" 
                               checked="@column.IsVisible"
                               @onchange="@((ChangeEventArgs e) => OnColumnVisibilityChanged(e, column))"
                               id="column-@column.Key" />
                        <label class="form-check-label" for="column-@column.Key">
                            @column.Label
                        </label>
                    </div>
                }
            </div>
        </div>
    </ChildContent>
    <!-- NO HAY FOOTER - Los cambios se guardan automáticamente al marcar/desmarcar checkboxes -->
</AppModal>


<!-- Modal: Detalle de Producto por Código de Barras -->
<AppModal IsOpen="showProductoModal" Title="Detalle de producto" OnClose="CerrarProductoModal">
    <ChildContent>
        @if (productoModal != null)
        {
            <div style="display:grid;grid-template-columns:1fr 1fr;gap:0.75rem;align-items:center;">
                <div><strong>Descripción:</strong></div>
                <div>@(productoModal.Producto?.DescripcionLarga ?? "-")</div>
                <div><strong>Rubro:</strong></div>
                <div>@(productoModal.Producto?.RubroCodigo ?? "-")</div>
                <div><strong>Código de barras:</strong></div>
                <div>@(productoModal.Producto?.CodigoBarra ?? "-")</div>
                <div><strong>Stock actual:</strong></div>
                <div>
                    <input id="modalStockActual" class="form-control" type="number" step="0.01" @bind-value="productoModal.StockActual" @bind-value:event="oninput" @onkeypress="OnModalStockKeyPress" inputmode="numeric" pattern="[0-9]*" />
                </div>
                <div><strong>Mínimo:</strong></div>
                <div>@(productoModal.StockMinimo?.ToString("0.##") ?? "-")</div>
                <div><strong>Sugerido:</strong></div>
                <div>@(productoModal.StockSugerido?.ToString("0.##") ?? "-")</div>
            </div>
        }
        else
        {
            <div>No se encontró información del producto.</div>
        }
    </ChildContent>
    <FooterContent>
        <div style="display: flex; gap: 0.5rem; justify-content: center; align-items: center; width: 100%;">
            <button class="btn btn-primary" @onclick="GuardarProductoModal" style="width: 120px; height: 50px; padding: 0.75rem 1rem; font-size: 1rem;">Guardar</button>
            <button class="btn btn-outline-secondary" @onclick="CerrarProductoModal" style="width: 120px; height: 50px; padding: 0.75rem 1rem; font-size: 1rem;">Cerrar</button>
        </div>
    </FooterContent>
    </AppModal>

<!-- Modal: Escáner QR para Ubicaciones -->
<AppModal IsOpen="showQRModal" Title="Escanear QR de Ubicación" OnClose="CerrarQRModal">
    <ChildContent>
        <div style="padding: 1rem; text-align: center;">
            <p class="mb-3">Apunta la cámara hacia el código QR de la ubicación:</p>
            
            <!-- Cámara para escanear QR -->
            <div id="qr-reader" style="width: 100%; max-width: 400px; margin: 0 auto;">
                <video id="qr-video" style="width: 100%; height: 300px; border: 2px solid #dee2e6; border-radius: 8px; background: #f8f9fa;"></video>
            </div>
            
            <!-- Botón para activar la cámara -->
            <div class="mt-3">
                <button class="btn btn-primary" @onclick="ActivarCamara" disabled="@isCameraLoading">
                    @if (isCameraLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-1"></span>
                        <span>Activando...</span>
                    }
                    else
                    {
                        <i class="oi oi-camera-slr"></i>
                        <span>Activar Cámara</span>
                    }
                </button>
            </div>
            
            <!-- Información de estado -->
            <div class="mt-2">
                <small class="text-muted">
                    Estado: @if (isCameraActive) { <span class="text-success">Cámara Activa</span> } else { <span class="text-muted">Cámara Inactiva</span> }
                </small>
            </div>
            
            <!-- Mensaje de error si existe -->
            @if (!string.IsNullOrEmpty(cameraErrorMessage))
            {
                <div class="mt-2">
                    <small class="text-danger">@cameraErrorMessage</small>
                </div>
            }
        </div>
    </ChildContent>
    <FooterContent>
        <div style="display: flex; gap: 0.5rem; justify-content: center; align-items: center; width: 100%;">
            <button class="btn btn-outline-secondary" @onclick="CerrarQRModal" style="width: 120px; height: 50px; padding: 0.75rem 1rem; font-size: 1rem;">
                <i class="oi oi-x"></i> Cerrar
            </button>
        </div>
    </FooterContent>
</AppModal>

@code {
    // ========================================
    // MODELOS PARA API DE DEPÓSITOS
    // ========================================
    public class DepositosResponse
    {
        [JsonPropertyName("status")]
        public string Status { get; set; } = string.Empty;
        
        [JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; }
        
        [JsonPropertyName("pageSize")]
        public int PageSize { get; set; }
        
        [JsonPropertyName("totalPages")]
        public int TotalPages { get; set; }
        
        [JsonPropertyName("totalRecords")]
        public int TotalRecords { get; set; }
        
        [JsonPropertyName("data")]
        public List<DepositoInfo> Data { get; set; } = new();
    }

    public class DepositoInfo
    {
        [JsonPropertyName("depositoID")]
        public int DepositoID { get; set; }
        
        [JsonPropertyName("descripcion")]
        public string Descripcion { get; set; } = string.Empty;
        
        [JsonPropertyName("domicilio")]
        public string? Domicilio { get; set; }
        
        [JsonPropertyName("fechaControlStock")]
        public DateTime? FechaControlStock { get; set; }
        
        [JsonPropertyName("encargadoPrinc")]
        public EncargadoPrincipal? EncargadoPrinc { get; set; }
        
        [JsonPropertyName("ubicacionPrinc")]
        public UbicacionPrincipal? UbicacionPrinc { get; set; }
        
        [JsonPropertyName("sucursal")]
        public SucursalInfo? Sucursal { get; set; }
        
        [JsonPropertyName("sector")]
        public object? Sector { get; set; }
        
        [JsonPropertyName("inhabilitado")]
        public bool Inhabilitado { get; set; }
        
        [JsonPropertyName("detalle")]
        public string? Detalle { get; set; }
        
        [JsonPropertyName("encargados")]
        public List<EncargadoInfo> Encargados { get; set; } = new();
    }

    public class EncargadoPrincipal
    {
        [JsonPropertyName("encargDepositoID")]
        public int EncargDepositoID { get; set; }
        
        [JsonPropertyName("empleadoID")]
        public int EmpleadoID { get; set; }
        
        [JsonPropertyName("razonSocial")]
        public string RazonSocial { get; set; } = string.Empty;
    }

    public class UbicacionPrincipal
    {
        [JsonPropertyName("productoUbicacionID")]
        public int ProductoUbicacionID { get; set; }
        
        [JsonPropertyName("descripcion")]
        public string Descripcion { get; set; } = string.Empty;
        
        [JsonPropertyName("orden")]
        public string Orden { get; set; } = string.Empty;
    }

    public class SucursalInfo
    {
        [JsonPropertyName("sucursalID")]
        public int SucursalID { get; set; }
        
        [JsonPropertyName("descripcion")]
        public string Descripcion { get; set; } = string.Empty;
    }

    public class EncargadoInfo
    {
        [JsonPropertyName("stockTipo")]
        public object? StockTipo { get; set; }
        
        [JsonPropertyName("encargDepositoID")]
        public int EncargDepositoID { get; set; }
        
        [JsonPropertyName("empleadoID")]
        public int EmpleadoID { get; set; }
        
        [JsonPropertyName("razonSocial")]
        public string RazonSocial { get; set; } = string.Empty;
    }

    // ========================================
    // VARIABLES Y PROPIEDADES
    // ========================================
    private string token = string.Empty;
    private string searchTerm = string.Empty;
    private bool isLoading = false;
    private bool filtersExpanded = false;
    private string errorMessage = string.Empty;
    private List<TreeNode> rootNodes = new();
    
    // Variable para almacenar el depositoID obtenido de la API de depósitos
    private int? depositoIDActual = null;
    private TreeNode? selectedNode = null;
    private Timer? searchTimer;
    private bool rightPanelHidden = true;
    private bool leftPanelHidden = false;
    private bool isResizing = false;
    private ElementReference resizeHandle;
    private bool isProcessingSelection = false;
    // Productos tipados, estado de filtros y edición de inventario
    private List<ProductoStock> productosSeleccionados = new();
    private int selectedProductsCount = 0;
    private bool inventarioEditable = false;
    private bool isTogglingInventory = false;
    private string filtroTexto = string.Empty; // descripción
    private string filtroRubro = string.Empty; // rubro/familia seleccionado
    private string _filtroRubroBuscar = string.Empty;
    private string filtroRubroBuscar 
    { 
        get => _filtroRubroBuscar; 
        set 
        { 
            _filtroRubroBuscar = value; 
            FiltrarFamilias();
        } 
    }
    private bool showRubroModal = false;
    private List<FamiliaItem> familias = new();
    private List<FamiliaItem> familiasFiltradas = new();
    private double filtrosAltura = 180;
    private bool incluirSubRubros = false;
    private bool isModalLoading = false;
    private Timer? modalSearchTimer;
    private string? barcodeInput;
    private bool showProductoModal = false;
    private ProductoStock? productoModal;
    
    // Referencia al DataGrid para manejo de inventario
    private DataGrid? dataGridRef;
    
    // Función para manejar cambios de stock desde el inventario
    private async Task OnInventoryStockChanged((string barcode, decimal newStock) stockChange)
    {
        // Buscar el producto en la lista y actualizar su CantidadInventario
        var producto = productosSeleccionados.FirstOrDefault(p => 
            p.Producto?.CodigoBarra == stockChange.barcode);
        
        if (producto != null)
        {
            producto.CantidadInventario = stockChange.newStock;
            await InvokeAsync(StateHasChanged);
        }
    }

    // Función para manejar cuando se envía el inventario exitosamente
    private async Task OnInventorySent()
    {
        Console.WriteLine("🔄 Refrescando grilla después del envío de inventario...");
        
        // Refrescar la lista de productos para limpiar los stocks modificados
        if (selectedNode != null)
        {
            await LoadProductsForNode(selectedNode);
        }
        
        Console.WriteLine("✅ Grilla refrescada correctamente");
    }

    /// <summary>
    /// Obtiene el depositoID basado en el orden de la ubicación seleccionada
    /// Compara el orden con la API de depósitos para encontrar el depositoID correspondiente
    /// </summary>
    /// <param name="ordenUbicacion">El orden de la ubicación seleccionada (ej: "0000000001.0000000002.0000000002.0000000001")</param>
    private async Task ObtenerDepositoIDPorOrden(string ordenUbicacion)
    {
        try
        {
            Console.WriteLine($"🏢 ====== OBTENIENDO DEPOSITOID POR ORDEN ======");
            Console.WriteLine($"🏢 Orden de ubicación: {ordenUbicacion}");
            
            // Obtener el token final
            var tokenFinal = await AuthService.GetTokenFINALAsync();
            if (string.IsNullOrEmpty(tokenFinal))
            {
                Console.WriteLine("❌ No se encontró el token final de autenticación");
                return;
            }
            
            Console.WriteLine($"🏢 Token final obtenido: {tokenFinal.Substring(0, Math.Min(20, tokenFinal.Length))}...");
            
            // Configurar headers
            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {tokenFinal}");
            
            // Llamar a la API de depósitos
            var apiUrl = "https://drrsystemas4.azurewebsites.net/Deposito";
            Console.WriteLine($"🏢 Llamando a la API: {apiUrl}");
            
            var response = await Http.GetAsync(apiUrl);
            
            Console.WriteLine($"🏢 Respuesta de la API - Status: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"🏢 JSON de respuesta recibido: {responseContent}");
                
                // Deserializar la respuesta
                var depositosResponse = JsonSerializer.Deserialize<DepositosResponse>(responseContent);
                
                if (depositosResponse?.Data != null)
                {
                    Console.WriteLine($"🏢 Total de depósitos en la respuesta: {depositosResponse.Data.Count}");
                    
                    // Buscar el depósito que coincida exactamente con el orden
                    var depositoEncontrado = depositosResponse.Data.FirstOrDefault(d => 
                        d.UbicacionPrinc?.Orden == ordenUbicacion);
                    
                    if (depositoEncontrado != null)
                    {
                        Console.WriteLine($"✅ DEPOSITO ENCONTRADO (COINCIDENCIA EXACTA):");
                        Console.WriteLine($"✅ DepositoID: {depositoEncontrado.DepositoID}");
                        Console.WriteLine($"✅ Descripción: {depositoEncontrado.Descripcion}");
                        Console.WriteLine($"✅ Orden: {depositoEncontrado.UbicacionPrinc?.Orden}");
                        Console.WriteLine($"✅ Sucursal: {depositoEncontrado.Sucursal?.Descripcion}");
                        Console.WriteLine($"✅ Encargado Principal: {depositoEncontrado.EncargadoPrinc?.RazonSocial}");
                        
                        // ALMACENAR EL DEPOSITOID PARA USAR EN EL INVENTARIO
                        depositoIDActual = depositoEncontrado.DepositoID;
                        Console.WriteLine($"💾 DepositoID almacenado para inventario: {depositoIDActual}");
                    }
                    else
                    {
                        Console.WriteLine($"❌ NO SE ENCONTRÓ DEPÓSITO con orden exacto: {ordenUbicacion}");
                        Console.WriteLine($"🔍 Buscando depósito PADRE que contenga este orden...");
                        
                        // Buscar el depósito padre que contenga el orden como prefijo
                        var depositoPadre = depositosResponse.Data.FirstOrDefault(d => 
                            !string.IsNullOrEmpty(d.UbicacionPrinc?.Orden) && 
                            ordenUbicacion.StartsWith(d.UbicacionPrinc.Orden));
                        
                        if (depositoPadre != null)
                        {
                            Console.WriteLine($"✅ DEPOSITO PADRE ENCONTRADO:");
                            Console.WriteLine($"✅ DepositoID: {depositoPadre.DepositoID}");
                            Console.WriteLine($"✅ Descripción: {depositoPadre.Descripcion}");
                            Console.WriteLine($"✅ Orden del depósito: {depositoPadre.UbicacionPrinc?.Orden}");
                            Console.WriteLine($"✅ Orden de la ubicación: {ordenUbicacion}");
                            Console.WriteLine($"✅ Sucursal: {depositoPadre.Sucursal?.Descripcion}");
                            Console.WriteLine($"✅ Encargado Principal: {depositoPadre.EncargadoPrinc?.RazonSocial}");
                            Console.WriteLine($"ℹ️ La ubicación seleccionada es una SUB-UBICACIÓN dentro de este depósito");
                            
                            // ALMACENAR EL DEPOSITOID PARA USAR EN EL INVENTARIO
                            depositoIDActual = depositoPadre.DepositoID;
                            Console.WriteLine($"💾 DepositoID almacenado para inventario: {depositoIDActual}");
                        }
                        else
                        {
                            Console.WriteLine($"❌ NO SE ENCONTRÓ DEPÓSITO PADRE para el orden: {ordenUbicacion}");
                            Console.WriteLine($"❌ Órdenes disponibles en la respuesta:");
                            foreach (var dep in depositosResponse.Data)
                            {
                                Console.WriteLine($"❌   - {dep.Descripcion}: {dep.UbicacionPrinc?.Orden ?? "SIN ORDEN"}");
                            }
                        }
                    }
                }
                else
                {
                    Console.WriteLine("❌ La respuesta no contiene datos de depósitos");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ Error en la API de depósitos:");
                Console.WriteLine($"❌ Status Code: {response.StatusCode}");
                Console.WriteLine($"❌ Error Content: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error obteniendo depositoID por orden:");
            Console.WriteLine($"❌ Tipo: {ex.GetType().Name}");
            Console.WriteLine($"❌ Mensaje: {ex.Message}");
            Console.WriteLine($"❌ Stack Trace: {ex.StackTrace}");
        }
    }
    
    // Variables para QR Scanner
    private bool showQRModal = false;
    private string qrDetectedValue = string.Empty;
    private bool isCameraActive = false;
    private bool isCameraLoading = false;
    private string cameraErrorMessage = string.Empty;
    private CancellationTokenSource? cameraCancellationToken;

    private async Task OnAddUbicacionClick()
    {
        // Abrir el QR scanner para escanear ubicaciones
        await AbrirQRScanner();
    }

    private async Task VolverAUbicaciones()
    {
        // Limpiar selección
        selectedNode = null;
        
        // Mostrar solo el panel de ubicaciones
        await JSRuntime.InvokeVoidAsync("toggleLocationsPanel", leftPanelHidden);
        
        // Actualizar estado
        StateHasChanged();
    }

    private async Task OnBarcodeKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await BuscarPorCodigoBarra();
        }
    }

    private async Task OnBarcodeFocus(FocusEventArgs e)
    {
        // Verificar si hay modales abiertas usando JavaScript para mayor precisión
        try
        {
            var hasModal = await JSRuntime.InvokeAsync<bool>("hasOpenModal");
            if (!hasModal)
            {
                await JSRuntime.InvokeVoidAsync("enableBarcodeKeyboard");
            }
            else
            {
                Console.WriteLine("🚫 Modal abierta detectada, no habilitando teclado de código de barras");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error verificando estado de modales: {ex.Message}");
            // Fallback: usar la verificación C# si JavaScript falla
            if (!showProductoModal && !showQRModal)
            {
                try
                {
                    await JSRuntime.InvokeVoidAsync("enableBarcodeKeyboard");
                }
                catch (Exception ex2)
                {
                    Console.WriteLine($"Error habilitando teclado: {ex2.Message}");
                }
            }
        }
    }

    private async Task OnBarcodeBlur(FocusEventArgs e)
    {
        // Cuando pierde el focus, volver a deshabilitar el teclado
        try
        {
            await JSRuntime.InvokeVoidAsync("disableBarcodeKeyboard");
        }
        catch { }
    }


    private async Task BuscarPorCodigoBarra()
    {
        if (string.IsNullOrWhiteSpace(barcodeInput)) return;
        var codigo = barcodeInput.Trim();
        // Buscar el producto en la lista seleccionada por código de barras si está disponible
        var match = productosSeleccionados.FirstOrDefault(p => string.Equals(p.Producto?.CodigoBarra, codigo, StringComparison.OrdinalIgnoreCase));
        if (match != null)
        {
            // Agregar al inventario si está disponible el DataGrid
            if (dataGridRef != null)
            {
                // Usar la cantidad de inventario si está disponible, sino el stock actual
                var cantidadInventario = match.CantidadInventario ?? match.StockActual ?? 0;
                
                Console.WriteLine($"DEBUG - Código: {codigo}, CantidadInventario: {match.CantidadInventario}, StockActual: {match.StockActual}, CantidadFinal: {cantidadInventario}");
                
                dataGridRef.AddInventoryItem(
                    codigo, 
                    match.Producto?.DescripcionLarga ?? "Producto sin descripción",
                    match.Producto?.RubroCodigo ?? "",
                    match.StockActual ?? 0, // Stock actual del sistema
                    cantidadInventario, // Cantidad ingresada por el usuario
                    match.Producto?.CodigoID ?? 0 // CodigoID del producto
                );
            }
            
            await AbrirProductoEnModal(match);
            barcodeInput = string.Empty;
            StateHasChanged();
            return;
        }
        // No encontrado: mostrar mensaje 1s y re-enfocar el input, sin abrir modal
        var previous = barcodeInput;
        barcodeInput = "No encontrado";
        await InvokeAsync(StateHasChanged);
        barcodeInput = string.Empty;
        await InvokeAsync(StateHasChanged);
        // Solo hacer focus si no hay modal abierta
        try
        {
            var hasModal = await JSRuntime.InvokeAsync<bool>("hasOpenModal");
            if (!hasModal)
            {
                await JSRuntime.InvokeVoidAsync("blazorFocusById", "barcodeInput");
            }
            else
            {
                Console.WriteLine("🚫 Modal abierta detectada, no aplicando focus al textbox de código de barras");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error verificando estado de modales: {ex.Message}");
            // Fallback: usar la verificación C# si JavaScript falla
            if (!showProductoModal && !showQRModal)
            {
                try { await JSRuntime.InvokeVoidAsync("blazorFocusById", "barcodeInput"); } catch { }
            }
        }
    }


    private async Task CerrarProductoModal()
    {
        showProductoModal = false;
        productoModal = null;
        
        // Restaurar focus al textbox de código de barras después de cerrar la modal
        await Task.Delay(300); // Delay más largo para asegurar que la modal se cierre completamente
        
        // Hacer focus al textbox de código de barras (verificación simple con C#)
        try 
        { 
            await JSRuntime.InvokeVoidAsync("blazorFocusById", "barcodeInput");
            Console.WriteLine("✅ Focus restaurado al textbox de código de barras después de cerrar modal de producto");
        } 
        catch (Exception ex)
        {
            Console.WriteLine($"Error restaurando focus después de cerrar modal: {ex.Message}");
        }
    }

    private async Task OnModalStockKeyPress(KeyboardEventArgs e)
    {
        Console.WriteLine($"🔑 OnModalStockKeyPress - Tecla presionada: {e.Key}");
        if (e.Key == "Enter")
        {
            Console.WriteLine("🔑 Enter presionado en modal de stock - Guardando producto...");
            await GuardarProductoModal();
        }
    }

    private async Task GuardarProductoModal()
    {
        // Actualizar la cantidad de inventario en el producto original
        if (productoModal != null)
        {
            var productoOriginal = productosSeleccionados.FirstOrDefault(p => 
                p.Producto?.CodigoBarra == productoModal.Producto?.CodigoBarra);
            if (productoOriginal != null)
            {
                productoOriginal.CantidadInventario = productoModal.StockActual;
                
                // También actualizar en el inventario del DataGrid si existe
                if (dataGridRef != null)
                {
                    await dataGridRef.AddInventoryItem(
                        productoModal.Producto?.CodigoBarra ?? "",
                        productoModal.Producto?.DescripcionLarga ?? "Producto sin descripción",
                        productoModal.Producto?.RubroCodigo ?? "",
                        productoOriginal.StockActual ?? 0,
                        productoModal.StockActual ?? 0,
                        productoModal.Producto?.CodigoID ?? 0 // CodigoID del producto
                    );
                }
            }
        }
        
        showProductoModal = false;
        await InvokeAsync(StateHasChanged);
        
        // Hacer focus al textbox de código de barras después de cerrar la modal
        await Task.Delay(300); // Delay más largo para asegurar que la modal se cierre completamente
        
        // Hacer focus al textbox de código de barras (verificación simple con C#)
        try 
        { 
            await JSRuntime.InvokeVoidAsync("blazorFocusById", "barcodeInput");
            Console.WriteLine("✅ Focus restaurado al textbox de código de barras después de guardar producto");
        } 
        catch (Exception ex)
        {
            Console.WriteLine($"Error restaurando focus después de guardar producto: {ex.Message}");
        }
    }


    // Foco en stock actual dentro de la modal al abrirse (se maneja en el OnAfterRenderAsync principal)
    private bool _focusStockInModal = false;
    private bool ubicacionCollapsed = false;
    
    // Variables para renderizado virtual
    private int _itemsPerPage = 50;
    private int _currentPage = 0;
    private int _totalPages = 0;
    private bool _useVirtualization = false;
    private bool _isMobileScreen = false;
    
    // Variables para configuración de columnas
    private bool showColumnConfigModal = false;
    private List<ColumnConfig> availableColumns = new();
    private List<ColumnConfig> gridColumns = new();
    private bool isResizingColumn = false;
    private int resizingColumnIndex = -1;
    private double startX = 0;
    private double startWidth = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("🚀 OnAfterRenderAsync - Iniciando carga inicial...");
                
                // Comentado temporalmente para evitar errores
                // await JSRuntime.InvokeVoidAsync("forceMobileStyles");
                var tokenLoaded = await LoadTokenFromStorage();
                
                // Cargar ubicaciones y expandir automáticamente si el token se cargó correctamente
                if (tokenLoaded)
                {
                    Console.WriteLine("📍 Cargando ubicaciones...");
                    await LoadUbicaciones();
                    
                    // Expandir todos los nodos después de cargar las ubicaciones
                    if (rootNodes != null && rootNodes.Any())
                    {
                        Console.WriteLine($"✅ Ubicaciones cargadas: {rootNodes.Count} nodos raíz");
                        SetExpandedState(rootNodes, true);
                        await InvokeAsync(StateHasChanged);
                    }
                    else
                    {
                        Console.WriteLine("❌ No se cargaron ubicaciones o rootNodes está vacío");
                    }
                    
                    // El menú debería aparecer automáticamente con el token cargado
                }
                else
                {
                    Console.WriteLine("❌ Token no cargado, no se cargarán ubicaciones");
                }
                
                // Registrar el componente Blazor para las llamadas JavaScript (después de cargar ubicaciones)
                try
                {
                    await JSRuntime.InvokeVoidAsync("registerBlazorComponent", DotNetObjectReference.Create(this));
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error registrando componente Blazor: {ex.Message}");
                }
                
                // Aplicar el estado inicial de ambos paneles
                // await JSRuntime.InvokeVoidAsync("toggleProductsPanel", rightPanelHidden);
                
                // Inicializar listeners responsivos
                await JSRuntime.InvokeVoidAsync("initResponsiveListeners");
                // En móviles, asegurar clase show-on-mobile cuando se va a mostrar
                // if (!rightPanelHidden)
                // {
                //     await JSRuntime.InvokeVoidAsync("toggleProductsPanel", false);
                // }
                // await JSRuntime.InvokeVoidAsync("toggleLocationsPanel", leftPanelHidden);
                // Inicializar el sistema de resize
                // await JSRuntime.InvokeVoidAsync("initResize");
                // Establecer la referencia del componente para JavaScript
                // await JSRuntime.InvokeVoidAsync("setBlazorComponent", DotNetObjectReference.Create(this));
                // No pre-cargar familias - se cargarán solo cuando se abra el modal
                
                // Colapsar ubicación automáticamente en móviles
                // var isMobile = await JSRuntime.InvokeAsync<bool>("isMobileDevice");
                // if (isMobile)
                // {
                //     ubicacionCollapsed = true;
                // }
                
                // Inicializar configuración de columnas
                await LoadColumnConfig();
                await LoadGridColumnConfig();
                
                // Configurar listener de resize para detectar cambios de tamaño
                try {
                    await JSRuntime.InvokeVoidAsync("setupResizeListener", DotNetObjectReference.Create(this));
                } catch (Exception ex) {
                    Console.WriteLine($"Error configurando listener de resize: {ex.Message}");
                }
                
                // Detectar estado móvil inicial inmediatamente
                try {
                    await JSRuntime.InvokeVoidAsync("detectInitialMobileState", DotNetObjectReference.Create(this));
                } catch (Exception ex) {
                    Console.WriteLine($"Error detectando estado móvil inicial: {ex.Message}");
                }
                
                // Forzar desactivación de virtualización si es móvil desde el inicio
                try {
                    var isMobile = await JSRuntime.InvokeAsync<bool>("isMobileDevice");
                    Console.WriteLine($"📱 Detección inicial de móvil: {isMobile}");
                    if (isMobile) {
                        Console.WriteLine("📱 Pantalla móvil detectada desde el inicio - Desactivando virtualización");
                        _isMobileScreen = true;
                        _isMobileScreenCacheValid = false; // Invalidar cache
                        _useVirtualization = false;
                        _currentPage = 0;
                        
                        // Forzar actualización inmediata
                        StateHasChanged();
                    } else {
                        // Asegurar que no sea móvil
                        _isMobileScreen = false;
                        _isMobileScreenCacheValid = false; // Invalidar cache
                    }
                } catch (Exception ex) {
                    Console.WriteLine($"Error detectando dispositivo móvil: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                // Log del error pero no romper la aplicación
                Console.WriteLine($"Error en OnAfterRenderAsync: {ex.Message}");
            }
        }
        // Seleccionar el campo de stock en la modal si corresponde
        if (_focusStockInModal && showProductoModal)
        {
            _focusStockInModal = false;
            try { 
                await JSRuntime.InvokeVoidAsync("blazorFocusById", "modalStockActual"); 
                // También seleccionar el texto automáticamente
                await JSRuntime.InvokeVoidAsync("selectTextInModal");
            } catch { }
        }
    }

    private async Task<bool> LoadTokenFromStorage()
    {
        try
        {
            Console.WriteLine("🔑 Cargando token desde storage...");
            // Usar el TOKEN FINAL del AuthService
            var tokenFinal = await AuthService.GetTokenFINALAsync();
            if (!string.IsNullOrEmpty(tokenFinal))
            {
                token = tokenFinal;
                Console.WriteLine("✅ Token cargado correctamente");
                StateHasChanged();
                return true;
            }
            Console.WriteLine("❌ No se encontró token en storage");
            return false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error cargando token: {ex.Message}");
            return false;
        }
    }



    private async Task LoadUbicaciones()
    {
        if (string.IsNullOrWhiteSpace(token))
        {
            errorMessage = "No se encontró token de autenticación. Por favor, inicie sesión nuevamente.";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        selectedNode = null; // Resetear selección al cargar nuevas ubicaciones

        try
        {
            // Asegurar que el panel de ubicaciones esté visible al recargar
            leftPanelHidden = false;
            // await JSRuntime.InvokeVoidAsync("toggleLocationsPanel", leftPanelHidden);

            // Colapsar panel de productos al cargar ubicaciones
            rightPanelHidden = true;
            // await JSRuntime.InvokeVoidAsync("toggleProductsPanel", rightPanelHidden);

            var response = await UbicacionService.GetUbicacionesAsync(token);
            
            if (response?.Data != null)
            {
                rootNodes = TreeBuilderService.BuildTree(response.Data);
            }
            else
            {
                errorMessage = "Error al cargar las ubicaciones. Verifique el token.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }


    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        
        // Debounce search
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                TreeBuilderService.ApplySearch(rootNodes, searchTerm);
                StateHasChanged();
            });
        }, null, 250, Timeout.Infinite);
    }

    private void OnFiltroTextoInput(ChangeEventArgs e)
    {
        filtroTexto = e.Value?.ToString() ?? string.Empty;
        
        // Colapsar filtros automáticamente si hay texto
        if (!string.IsNullOrWhiteSpace(filtroTexto))
        {
            filtersExpanded = false;
        }
        
        // Debounce para filtro de productos
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                // Limpiar cache de códigos de rubro si cambió el filtro
                _cachedCodigosRubro.Clear();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }


    private async Task ToggleFilters()
    {
        // Si se está expandiendo los filtros
        if (!filtersExpanded)
        {
            // Verificar si hay ubicaciones cargadas
            if (rootNodes == null || !rootNodes.Any())
            {
                // No hay ubicaciones, verificar si hay token
                if (string.IsNullOrWhiteSpace(token))
                {
                    // No hay token, mostrar error
                    errorMessage = "No se encontró token de autenticación. Por favor, inicie sesión nuevamente.";
                    return;
                }
                
                // Si hay token, cargar ubicaciones automáticamente
                await LoadUbicaciones();
            }
        }
        
        filtersExpanded = !filtersExpanded;
        // Actualizar UI inmediatamente sin procesamiento pesado
        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleLocationsPanel()
    {
        leftPanelHidden = !leftPanelHidden;
        await JSRuntime.InvokeVoidAsync("toggleLocationsPanel", leftPanelHidden);
    }

    private async Task ToggleProductsPanel()
    {
        rightPanelHidden = !rightPanelHidden;
        await JSRuntime.InvokeVoidAsync("showOnlyProductsPanel");
    }

    [JSInvokable]
    public async Task SelectNodeFromJS(int nodeId, string descripcion, int level, string orden)
    {
        // Validar parámetros
        if (nodeId <= 0 || string.IsNullOrEmpty(descripcion))
        {
            return;
        }
        
        // Buscar el nodo en el árbol
        var node = FindNodeById(rootNodes, nodeId);
        
        if (node != null)
        {
            // Deseleccionar nodo anterior
            if (selectedNode != null)
            {
                selectedNode.IsSelected = false;
            }

            // Seleccionar nuevo nodo
            node.IsSelected = true;
            selectedNode = node;
            
            // Forzar actualización del estado
            StateHasChanged();
            
            // Ocultar completamente el panel de ubicaciones al seleccionar cualquier ubicación
            leftPanelHidden = true;
            await JSRuntime.InvokeVoidAsync("toggleLocationsPanel", leftPanelHidden);
            
            // Asegurar que el panel de productos esté visible (especialmente en móviles)
            await JSRuntime.InvokeVoidAsync("toggleProductsPanel", false);
            rightPanelHidden = false;

            // Cargar productos de la ubicación seleccionada
            _currentPage = 0; // Reiniciar paginación al cambiar de nodo
            await LoadProductsForNode(node);
        }
        else
        {
            // Intentar buscar por descripción como fallback
            var nodeByDesc = FindNodeByDescription(rootNodes, descripcion);
            if (nodeByDesc != null)
            {
                // Deseleccionar nodo anterior
                if (selectedNode != null)
                {
                    selectedNode.IsSelected = false;
                }

                // Seleccionar nuevo nodo
                nodeByDesc.IsSelected = true;
                selectedNode = nodeByDesc;
                
                // Forzar actualización del estado
                StateHasChanged();
                
                // Ocultar completamente el panel de ubicaciones al seleccionar cualquier ubicación
                leftPanelHidden = true;
                await JSRuntime.InvokeVoidAsync("toggleProductsPanel", false);
                
                // Asegurar que el panel de productos esté visible (especialmente en móviles)
                await JSRuntime.InvokeVoidAsync("toggleProductsPanel", false);
                rightPanelHidden = false;

                // Cargar productos de la ubicación seleccionada
                _currentPage = 0; // Reiniciar paginación al cambiar de nodo
                await LoadProductsForNode(nodeByDesc);
            }
        }
    }

    private TreeNode FindNodeById(List<TreeNode> nodes, int nodeId)
    {
        foreach (var node in nodes)
        {
            if (node.Item.ProductoUbicacionID == nodeId)
            {
                return node;
            }
            
            if (node.Children.Any())
            {
                var found = FindNodeById(node.Children, nodeId);
                if (found != null)
                {
                    return found;
                }
            }
        }
        
        return null;
    }

    private TreeNode FindNodeByDescription(List<TreeNode> nodes, string descripcion)
    {
        foreach (var node in nodes)
        {
            if (node.Item.Descripcion == descripcion)
            {
                return node;
            }
            
            if (node.Children.Any())
            {
                var found = FindNodeByDescription(node.Children, descripcion);
                if (found != null)
                {
                    return found;
                }
            }
        }
        
        return null;
    }

    private async Task OnNodeSelected(TreeNode node)
    {
        if (node == null || node.Item == null)
        {
            return;
        }
        
        // Evitar selecciones múltiples simultáneas
        if (isProcessingSelection)
        {
            return;
        }
        
        // Verificar si ya está seleccionado el mismo nodo
        if (selectedNode != null && selectedNode.Item.ProductoUbicacionID == node.Item.ProductoUbicacionID)
        {
            return;
        }
        
        isProcessingSelection = true;
        
        try
        {
            // Deseleccionar nodo anterior
            if (selectedNode != null)
            {
                selectedNode.IsSelected = false;
            }

            // Seleccionar nuevo nodo
            node.IsSelected = true;
            selectedNode = node;
            
            // Forzar actualización del estado
            StateHasChanged();
            
            // FORZAR: Ocultar ubicaciones y mostrar productos
            leftPanelHidden = true;
            rightPanelHidden = false;
            
            Console.WriteLine($"🔥 OnNodeSelected - Ocultando ubicaciones, mostrando productos");
            Console.WriteLine($"🔥 OnNodeSelected - leftPanelHidden: {leftPanelHidden}, rightPanelHidden: {rightPanelHidden}");
            Console.WriteLine($"🔥 OnNodeSelected - selectedNode: {selectedNode?.Item?.Descripcion}");
            
            // Forzar actualización del estado
            await InvokeAsync(StateHasChanged);
            
            // Forzar actualización adicional después de un pequeño delay
            await Task.Delay(100);
            await InvokeAsync(StateHasChanged);
            
            Console.WriteLine($"🔥 OnNodeSelected - Estado actualizado, leftPanelHidden: {leftPanelHidden}, rightPanelHidden: {rightPanelHidden}");

            // Si es pantalla pequeña (incluye F12 responsive), ocultar elementos no necesarios
            bool isMobile = await JSRuntime.InvokeAsync<bool>("isMobileDevice");
            if (isMobile)
            {
                try { await JSRuntime.InvokeVoidAsync("hideById", "token-input"); } catch { }
                try { await JSRuntime.InvokeVoidAsync("hideByClass", "load-btn"); } catch { }
                try { await JSRuntime.InvokeVoidAsync("hideByClass", "panel-toggle"); } catch { }
                try { await JSRuntime.InvokeVoidAsync("hideById", "inventarioButton"); } catch { }
                try { await JSRuntime.InvokeVoidAsync("hideById", "filtersToggleButton"); } catch { }
                try { await JSRuntime.InvokeVoidAsync("hideByClass", "record-count"); } catch { }
            }
            
            // Si se selecciona un depósito o cualquier sub-ubicación, ocultar el panel de ubicaciones
            bool shouldHideLocations = node.Level > 0;
            
            if (shouldHideLocations && !leftPanelHidden)
            {
                await ToggleLeftPanel();
            }

            // Cargar productos de la ubicación seleccionada
            _currentPage = 0; // Reiniciar paginación al cambiar de nodo
            Console.WriteLine($"🔥 OnNodeSelected - Llamando LoadProductsForNode para: {node.Item.Descripcion}");
            try
            {
                await LoadProductsForNode(node);
                Console.WriteLine($"🔥 OnNodeSelected - LoadProductsForNode completado");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"🔥 OnNodeSelected - Error en LoadProductsForNode: {ex.Message}");
                Console.WriteLine($"🔥 OnNodeSelected - Stack trace: {ex.StackTrace}");
            }
        }
        finally
        {
            isProcessingSelection = false;
        }
    }


    private string GetLocationPath(TreeNode node)
    {
        if (node == null) return string.Empty;
        
        var path = new List<string>();
        var current = node;
        
        // Construir la ruta desde el nodo actual hasta la raíz
        while (current != null)
        {
            if (!string.IsNullOrEmpty(current.Item.Descripcion))
        {
            path.Insert(0, current.Item.Descripcion);
            }
            current = current.Parent;
        }
        
        return string.Join(" / ", path);
    }

    private int VisibleNodeCount => rootNodes?.Count(n => n.IsVisible) ?? 0;
    private IEnumerable<ProductoStock> productosFiltrados => FilterProductos();
    
    // Contar productos que están en inventario (con CantidadInventario modificada)
    private int ProductosEnInventarioCount => productosSeleccionados.Count(p => 
        p.CantidadInventario.HasValue && p.CantidadInventario != p.StockActual);

    private async Task ExpandAll()
    {
        // Verificar si hay ubicaciones cargadas
        if (rootNodes == null || !rootNodes.Any())
        {
            // No hay ubicaciones, verificar si hay token
            if (string.IsNullOrWhiteSpace(token))
            {
                // No hay token, mostrar error
                errorMessage = "No se encontró token de autenticación. Por favor, inicie sesión nuevamente.";
                return;
            }
            
            // Si hay token, cargar ubicaciones automáticamente
            await LoadUbicaciones();
        }
        
        // Expandir todos los nodos
        if (rootNodes != null)
        {
            SetExpandedState(rootNodes, true);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task CollapseAll()
    {
        // Verificar si hay ubicaciones cargadas
        if (rootNodes == null || !rootNodes.Any())
        {
            // No hay ubicaciones, verificar si hay token
            if (string.IsNullOrWhiteSpace(token))
            {
                // No hay token, mostrar error
                errorMessage = "No se encontró token de autenticación. Por favor, inicie sesión nuevamente.";
                return;
            }
            
            // Si hay token, cargar ubicaciones automáticamente
            await LoadUbicaciones();
        }
        
        // Colapsar todos los nodos
        if (rootNodes != null)
        {
            SetExpandedState(rootNodes, false);
            await InvokeAsync(StateHasChanged);
        }
    }

    private void SetExpandedState(List<TreeNode> nodes, bool expanded)
    {
        foreach (var node in nodes)
        {
            node.IsExpanded = expanded;
            if (node.Children.Any())
            {
                SetExpandedState(node.Children, expanded);
            }
        }
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }

    private async Task ToggleRightPanel()
    {
        rightPanelHidden = !rightPanelHidden;
        await JSRuntime.InvokeVoidAsync("toggleProductsPanel", rightPanelHidden);
    }

    private async Task ToggleLeftPanel()
    {
        // Si se está intentando mostrar el panel (expandir ubicaciones)
        if (leftPanelHidden)
        {
            // Verificar si hay token guardado
            if (string.IsNullOrWhiteSpace(token))
            {
                // No hay token, mostrar error
                errorMessage = "No se encontró token de autenticación. Por favor, inicie sesión nuevamente.";
                return;
            }
            
            // Si hay token, cargar ubicaciones automáticamente
            await LoadUbicaciones();
        }
        
        leftPanelHidden = !leftPanelHidden;
        await JSRuntime.InvokeVoidAsync("toggleLocationsPanel", leftPanelHidden);
    }

    private void StartResize(MouseEventArgs e)
    {
        isResizing = true;
        StateHasChanged();
    }

    private void StopResize()
    {
        isResizing = false;
        StateHasChanged();
    }

    /// <summary>
    /// Carga los productos de una ubicación específica seleccionada
    /// Este método se ejecuta automáticamente cuando:
    /// - Se selecciona una ubicación manualmente desde el árbol
    /// - Se detecta un QR con un ProductoUbicacionID válido
    /// - Se busca una ubicación por ID desde el modal QR
    /// </summary>
    /// <param name="node">Nodo de la ubicación seleccionada</param>
    private async Task LoadProductsForNode(TreeNode node)
    {
        try
        {
            Console.WriteLine($"📦 LoadProductsForNode - Iniciando carga para: {node.Item.Descripcion} (ID: {node.Item.ProductoUbicacionID})");
            
            // SIMPLIFICADO: Solo cambiar las variables de estado
            leftPanelHidden = true;
            rightPanelHidden = false;
            
            Console.WriteLine($"📦 LoadProductsForNode - leftPanelHidden: {leftPanelHidden}, rightPanelHidden: {rightPanelHidden}");
            
            // Forzar actualización del estado
            await InvokeAsync(StateHasChanged);

            isLoading = true;
            productosSeleccionados.Clear();
            selectedProductsCount = 0;
            Console.WriteLine($"📦 LoadProductsForNode - Limpiando productos anteriores, isLoading: {isLoading}");
            await InvokeAsync(StateHasChanged);
            await Task.Yield();
            
            // 1 = incluir stock; usar Orden del nodo para incluir sub-ubicaciones
            Console.WriteLine($"📦 LoadProductsForNode - Llamando API con Orden: {node.Item.Orden}");
            
            // OBTENER DEPOSITOID BASADO EN EL ORDEN DE LA UBICACIÓN
            await ObtenerDepositoIDPorOrden(node.Item.Orden);
            
            var resp = await UbicacionService.GetUbicacionesAsync(token, node.Item.Orden, 1);
            Console.WriteLine($"📦 LoadProductsForNode - Respuesta API recibida: {resp?.Data?.Count ?? 0} elementos");
            
            if (resp?.Data != null)
            {
                var processed = 0;
                foreach (var it in resp.Data)
                {
                    if (it.ItemsStock != null && it.ItemsStock.Count > 0)
                    {
                        Console.WriteLine($"📦 LoadProductsForNode - Procesando {it.ItemsStock.Count} productos de ubicación: {it.Descripcion}");
                        foreach (var s in it.ItemsStock)
                        {
                            try
                            {
                                var ps = System.Text.Json.JsonSerializer.Deserialize<ProductoStock>(s.ToString() ?? string.Empty);
                                if (ps != null)
                                {
                                    productosSeleccionados.Add(ps);
                                }
                                processed++;
                                if (processed % 200 == 0)
                                {
                                    selectedProductsCount = productosSeleccionados.Count;
                                    await InvokeAsync(StateHasChanged);
                                    await Task.Yield();
                                }
                            }
                            catch { }
                        }
                    }
                }
                selectedProductsCount = productosSeleccionados.Count;
                Console.WriteLine($"📦 LoadProductsForNode - Total productos cargados: {selectedProductsCount}");
                // Activar paginación automática si la cantidad es alta SOLO EN PANTALLAS GRANDES
                // En móviles siempre mostrar todos los productos
                // En pantallas pequeñas SIEMPRE mostrar todos los registros
                if (_isMobileScreen)
                {
                    _useVirtualization = false; // Forzar mostrar todos los registros en móviles
                    Console.WriteLine("📱 Pantalla móvil detectada - Virtualización DESACTIVADA - Mostrando TODOS los registros");
                }
                else
                {
                    _useVirtualization = selectedProductsCount > 200;
                    Console.WriteLine($"🖥️ Pantalla desktop - Virtualización: {_useVirtualization} (Productos: {selectedProductsCount})");
                }
                _currentPage = 0;
                
                // Al finalizar la carga y mostrar todos, enfocar textbox de código de barras
                // Solo hacer focus si no hay modal abierta (verificación simple)
                if (!showProductoModal && !showQRModal)
                {
                    try { 
                        await JSRuntime.InvokeVoidAsync("blazorFocusById", "barcodeInput"); 
                        Console.WriteLine("✅ Focus aplicado al textbox de código de barras después de cargar productos");
                    } catch (Exception ex) {
                        Console.WriteLine($"Error aplicando focus: {ex.Message}");
                    }
                }
                else
                {
                    Console.WriteLine("🚫 Modal abierta detectada, no aplicando focus al textbox de código de barras");
                }
                // Actualizar estado de móvil siempre
                try {
                    // Forzar detección de móvil
                    await JSRuntime.InvokeVoidAsync("forceMobileDetection");
                    await JSRuntime.InvokeVoidAsync("updateMobileState", DotNetObjectReference.Create(this));
                    
                    // Verificación adicional para asegurar que se detecte correctamente
                    var isMobile = await JSRuntime.InvokeAsync<bool>("isMobileDevice");
                    if (isMobile != _isMobileScreen) {
                        Console.WriteLine($"📱 Corrección de estado móvil - Detectado: {isMobile}, Actual: {_isMobileScreen}");
                        await SetMobileState(isMobile);
                    }
                } catch (Exception ex) {
                    Console.WriteLine($"Error actualizando estado móvil: {ex.Message}");
                }
            }
            else
            {
                errorMessage = "No se pudieron cargar los productos de la ubicación.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar productos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            Console.WriteLine($"📦 LoadProductsForNode - Finalizando, isLoading: {isLoading}, productosSeleccionados: {productosSeleccionados.Count}");
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ToggleInventario()
    {
        if (isTogglingInventory) return;
        isTogglingInventory = true;
        await InvokeAsync(StateHasChanged);
        // No Task.Yield si hay muchas filas; solo un frame es suficiente

        try
        {
            if (!inventarioEditable)
            {
                // Evitar recorrer todas las filas si no hace falta: se copia on-demand al enfocar
            }
            inventarioEditable = !inventarioEditable;
        }
        finally
        {
            isTogglingInventory = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnCantidadInventarioChanged(ProductoStock producto, ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out var val))
        {
            producto.CantidadInventario = val;
        }
        else
        {
            producto.CantidadInventario = null;
        }
    }

    private void OnCantidadInput(ProductoStock producto, ChangeEventArgs e)
    {
        // oninput: evitar parseos costosos; guardamos valor tal cual o parse rápido invariante
        var s = e.Value?.ToString() ?? string.Empty;
        if (decimal.TryParse(s, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out var val))
        {
            producto.CantidadInventario = val;
        }
    }

    [JSInvokable]
    public void FocusInputInit(string currentValue, int codigoId)
    {
        // Este hook queda para futuras mejoras si queremos manipular foco vía JS
    }

    private void ClearProductFilters()
    {
        filtroTexto = string.Empty;
    }

    private void ApplyProductFilters()
    {
        StateHasChanged();
    }

    private IEnumerable<ProductoStock> FilterProductos()
    {
        if (productosSeleccionados == null || !productosSeleccionados.Any())
        {
            return Enumerable.Empty<ProductoStock>();
        }

        var data = productosSeleccionados.AsEnumerable();
        
        // Filtro por descripción (optimizado)
        if (!string.IsNullOrWhiteSpace(filtroTexto))
        {
            var t = filtroTexto.Trim().ToLowerInvariant();
            data = data.Where(p => 
            {
                var descripcion = p.Producto?.DescripcionLarga;
                return descripcion != null && descripcion.ToLowerInvariant().Contains(t);
            });
        }
        
        // Filtro por rubro/familia (altamente optimizado)
        if (!string.IsNullOrWhiteSpace(filtroRubro))
        {
            var codigosRubro = GetCodigosRubroParaFiltrar();
            if (codigosRubro.Any())
            {
                // Convertir a HashSet para búsquedas O(1)
                var codigosSet = new HashSet<string>(codigosRubro.Select(c => c.ToLowerInvariant()), StringComparer.OrdinalIgnoreCase);
                
                data = data.Where(p => 
                {
                    var producto = p.Producto;
                    if (producto == null) return false;
                    
                    var rubroProducto = producto.RubroCodigo?.ToLowerInvariant() ?? string.Empty;
                    var descripcionProducto = producto.DescripcionLarga?.ToLowerInvariant() ?? string.Empty;
                    
                    // Búsqueda optimizada usando HashSet
                    return codigosSet.Any(codigo => 
                        rubroProducto.Contains(codigo) || descripcionProducto.Contains(codigo));
                });
            }
        }
        
        return data;
    }


    // Modal Rubro/Familia - optimizado para rendimiento
    private IEnumerable<FamiliaItem> GetFamiliasFiltradas()
    {
        // Si no hay familias cargadas, usar rubros de productos (más rápido)
        if (familias == null || familias.Count == 0)
        {
            var rubrosUnicos = productosSeleccionados
                .Select(p => p.Producto.RubroCodigo ?? string.Empty)
                .Where(s => !string.IsNullOrWhiteSpace(s))
                .Distinct()
                .Select(r => new FamiliaItem { Descripcion = r, Orden = "0000000000" })
                .OrderBy(f => f.Descripcion);
            return rubrosUnicos;
        }

        // Usar la lista ya filtrada (más rápido que filtrar cada vez)
        if (string.IsNullOrWhiteSpace(filtroRubroBuscar))
        {
            return familiasFiltradas;
        }

        // Búsqueda rápida solo si hay texto
        var busqueda = filtroRubroBuscar.Trim().ToLowerInvariant();
        return familiasFiltradas.Where(f => f.Descripcion.ToLowerInvariant().Contains(busqueda));
    }

    private async Task SeleccionarFamilia(FamiliaItem familia)
    {
        filtroRubro = familia.Descripcion;
        showRubroModal = false;
        
        // Colapsar filtros automáticamente al seleccionar una familia
        filtersExpanded = false;
        
        // Limpiar cache de códigos de rubro
        _cachedCodigosRubro.Clear();
        
        // Actualizar UI inmediatamente sin debug pesado
        await InvokeAsync(StateHasChanged);
    }

    // Obtener todas las familias hijas de una familia padre
    private List<FamiliaItem> GetFamiliasHijas(FamiliaItem familiaPadre)
    {
        if (familias == null || familias.Count == 0) return new List<FamiliaItem>();

        var familiasHijas = new List<FamiliaItem>();
        var ordenPadre = familiaPadre.Orden;

        foreach (var familia in familias)
        {
            // Si la familia actual es hija de la familia padre (su orden empieza con el orden del padre)
            if (familia.Orden.StartsWith(ordenPadre + ".") || 
                (familia.Orden != ordenPadre && familia.Orden.Length > ordenPadre.Length && 
                 familia.Orden.Substring(0, ordenPadre.Length) == ordenPadre))
            {
                familiasHijas.Add(familia);
            }
        }

        return familiasHijas;
    }

    // Obtener códigos de rubro para filtrar (incluyendo sub-rubros si está habilitado)
    // Cache para códigos de rubro para evitar recálculos
    private string _lastFiltroRubro = string.Empty;
    private bool _lastIncluirSubRubros = false;
    private List<string> _cachedCodigosRubro = new();

    private List<string> GetCodigosRubroParaFiltrar()
    {
        if (string.IsNullOrWhiteSpace(filtroRubro)) 
        {
            _cachedCodigosRubro = new List<string>();
            return _cachedCodigosRubro;
        }

        // Usar cache si no han cambiado los parámetros
        if (_lastFiltroRubro == filtroRubro && _lastIncluirSubRubros == incluirSubRubros && _cachedCodigosRubro.Any())
        {
            return _cachedCodigosRubro;
        }

        var codigos = new List<string>();
        
        // Buscar la familia seleccionada (optimizado con HashSet si hay muchas familias)
        var familiaSeleccionada = familias?.FirstOrDefault(f => f.Descripcion.Equals(filtroRubro, StringComparison.OrdinalIgnoreCase));
        
        if (familiaSeleccionada != null)
        {
            // Agregar la descripción de la familia
            codigos.Add(familiaSeleccionada.Descripcion);
            
            if (incluirSubRubros)
            {
                // Agregar todas las familias hijas (optimizado)
                var familiasHijas = GetFamiliasHijas(familiaSeleccionada);
                codigos.AddRange(familiasHijas.Select(f => f.Descripcion));
            }
        }
        else
        {
            // Fallback: usar el texto tal como está
            codigos.Add(filtroRubro);
        }
        
        // Actualizar cache
        _lastFiltroRubro = filtroRubro;
        _lastIncluirSubRubros = incluirSubRubros;
        _cachedCodigosRubro = codigos;
        
        return codigos;
    }

    // Métodos para renderizado virtual
    private IEnumerable<ProductoStock> GetPaginatedProducts()
    {
        var filtered = FilterProductos();
        var totalItems = filtered.Count();
        _totalPages = (int)Math.Ceiling((double)totalItems / _itemsPerPage);
        
        if (_totalPages == 0) return Enumerable.Empty<ProductoStock>();
        
        // Asegurar que la página actual sea válida
        if (_currentPage >= _totalPages) _currentPage = _totalPages - 1;
        if (_currentPage < 0) _currentPage = 0;
        
        return filtered.Skip(_currentPage * _itemsPerPage).Take(_itemsPerPage);
    }

    private void NextPage()
    {
        if (_currentPage < _totalPages - 1)
        {
            _currentPage++;
            StateHasChanged();
        }
    }

    private void PreviousPage()
    {
        if (_currentPage > 0)
        {
            _currentPage--;
            StateHasChanged();
        }
    }

    private void GoToPage(int page)
    {
        if (page >= 0 && page < _totalPages)
        {
            _currentPage = page;
            StateHasChanged();
        }
    }

    private void ToggleVirtualization()
    {
        _useVirtualization = !_useVirtualization;
        _currentPage = 0; // Reset a la primera página
        StateHasChanged();
    }

    // Función para detectar si estamos en una pantalla móvil (optimizada)
    private bool IsMobileScreen()
    {
        return _isMobileScreen;
    }
    
    // Cache para evitar llamadas repetidas a IsMobileScreen()
    private bool _isMobileScreenCached = false;
    private bool _isMobileScreenCacheValid = false;

    // Método para actualizar el estado de móvil desde JavaScript
    [JSInvokable]
    public async Task SetMobileState(bool isMobile)
    {
        bool wasMobile = _isMobileScreen;
        _isMobileScreen = isMobile;
        
        // Invalidar cache cuando cambie el estado de móvil
        _isMobileScreenCacheValid = false;
        
        Console.WriteLine($"📱 SetMobileState - isMobile: {isMobile}, wasMobile: {wasMobile}");
        
        // Si es móvil (cambió o ya era móvil), SIEMPRE desactivar virtualización
        if (isMobile)
        {
            Console.WriteLine("📱 Pantalla móvil detectada - FORZANDO desactivación de virtualización");
            _useVirtualization = false;
            _currentPage = 0;
            
            Console.WriteLine("📱 Virtualización desactivada - Los productos se recargarán automáticamente");
        }
        // Si cambió de móvil a desktop, reactivar virtualización si es necesario
        else if (!isMobile && wasMobile && productosSeleccionados != null && productosSeleccionados.Count > 200)
        {
            Console.WriteLine("🖥️ Cambio a pantalla desktop detectado - Reactivando paginación");
            _useVirtualization = true;
            _currentPage = 0;
            await LoadProductsForNode(selectedNode);
        }
        
        Console.WriteLine($"📱 Estado final - Virtualización: {_useVirtualization}, Página: {_currentPage}, Móvil: {_isMobileScreen}");
        StateHasChanged();
    }

    // Función para forzar la recarga de todos los productos en móviles
    [JSInvokable]
    public async Task ForceReloadAllProducts()
    {
        if (_isMobileScreen && productosSeleccionados != null && productosSeleccionados.Any())
        {
            Console.WriteLine($"📱 Forzando recarga de todos los {productosSeleccionados.Count} productos para móvil");
            _useVirtualization = false;
            _currentPage = 0;
            await LoadProductsForNode(selectedNode);
        }
    }

    // Función para forzar la desactivación de virtualización en móviles
    [JSInvokable]
    public void ForceDisableVirtualization()
    {
        Console.WriteLine("📱 Forzando desactivación de virtualización para móviles");
        _useVirtualization = false;
        _currentPage = 0;
        _isMobileScreen = true;
        
        Console.WriteLine($"📱 Estado actual - Virtualización: {_useVirtualization}, Página: {_currentPage}, Móvil: {_isMobileScreen}");
        
        StateHasChanged();
    }

    // Función para manejar la selección de productos desde la grilla
    // COMENTARIO: Esta función se ejecuta cuando se hace clic en una fila de la grilla o en el botón de selección
    private async Task OnProductoSelected(object item)
    {
        Console.WriteLine($"🖱️ OnProductoSelected llamado con: {item?.GetType().Name}");
        
        if (item is ProductoStock producto)
        {
            Console.WriteLine($"🖱️ Producto seleccionado: {producto.Producto?.DescripcionLarga}");
            Console.WriteLine($"🖱️ Código de barras: {producto.Producto?.CodigoBarra}");
            
            // Solo abrir la modal si el producto tiene código de barras
            if (!string.IsNullOrEmpty(producto.Producto?.CodigoBarra))
            {
                Console.WriteLine("🖱️ Abriendo modal del producto...");
                await AbrirProductoEnModal(producto);
            }
            else
            {
                Console.WriteLine("🖱️ Producto sin código de barras, mostrando alert...");
                // Mostrar mensaje si no tiene código de barras
                await JSRuntime.InvokeVoidAsync("alert", "Este producto no tiene código de barras configurado.");
                
                // Hacer focus al textbox de código de barras después del alert
                await Task.Delay(100); // Pequeño delay para asegurar que el alert se cierre
                try 
                { 
                    await JSRuntime.InvokeVoidAsync("blazorFocusById", "barcodeInput");
                    Console.WriteLine("✅ Focus restaurado al textbox de código de barras después de mensaje de producto sin código de barras");
                } 
                catch (Exception ex)
                {
                    Console.WriteLine($"Error restaurando focus después de mensaje de producto sin código de barras: {ex.Message}");
                }
            }
        }
        else
        {
            Console.WriteLine($"🖱️ Item no es ProductoStock: {item?.GetType().Name}");
        }
    }

    // Función para abrir la modal del producto (reutilizada desde el escaneo de códigos de barras)
    private async Task AbrirProductoEnModal(ProductoStock producto)
    {
        // Si el producto ya tiene stock modificado (está en inventario), usar ese valor
        // Si no, usar el stock del sistema
        var stockParaMostrar = producto.CantidadInventario ?? producto.StockActual ?? 0;
        
        productoModal = new ProductoStock
        {
            Producto = producto.Producto,
            StockActual = stockParaMostrar, // Mostrar el stock modificado si existe, sino el del sistema
            CantidadInventario = producto.CantidadInventario ?? producto.StockActual ?? 0
        };
        
        showProductoModal = true;
        _focusStockInModal = true; // Marcar para enfocar el campo de stock
        StateHasChanged();
        
        // Seleccionar el texto del stock actual (tanto en móviles como desktop)
        await Task.Delay(100); // Pequeño delay para asegurar que la modal esté renderizada
        try
        {
            await JSRuntime.InvokeVoidAsync("selectTextInModal");
        }
        catch { }
    }

    // Calcular el nivel de jerarquía basado en el campo orden
    private int GetNivelFamilia(string orden)
    {
        if (string.IsNullOrWhiteSpace(orden)) return 0;
        
        // Contar los puntos en el orden para determinar el nivel
        return orden.Count(c => c == '.');
    }

    // Abrir modal de familias de forma optimizada
    private async Task AbrirModalFamilias()
    {
        if (isModalLoading) return;
        
        isModalLoading = true;
        showRubroModal = true;
        filtroRubroBuscar = string.Empty;
        
        try
        {
            // Cargar familias solo si no están cargadas
            if (familias == null || familias.Count == 0)
            {
                if (!string.IsNullOrWhiteSpace(token))
                {
                    familias = await ProductoService.GetFamiliasAsync(token);
                }
            }
            
            // Inicializar lista filtrada
            familiasFiltradas = familias?.ToList() ?? new List<FamiliaItem>();
        }
        catch (Exception ex)
        {
            // En caso de error, usar rubros de productos
            familiasFiltradas = productosSeleccionados
                .Select(p => p.Producto.RubroCodigo ?? string.Empty)
                .Where(s => !string.IsNullOrWhiteSpace(s))
                .Distinct()
                .Select(r => new FamiliaItem { Descripcion = r, Orden = "0000000000" })
                .ToList();
        }
        finally
        {
            isModalLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }


    private void FiltrarFamilias()
    {
        // Debounce search para evitar búsquedas excesivas
        modalSearchTimer?.Dispose();
        modalSearchTimer = new Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                if (!string.IsNullOrWhiteSpace(filtroRubroBuscar))
                {
                    var busqueda = filtroRubroBuscar.Trim().ToLowerInvariant();
                    familiasFiltradas = familias?.Where(f => f.Descripcion.ToLowerInvariant().Contains(busqueda)).ToList() ?? new List<FamiliaItem>();
                }
                else
                {
                    familiasFiltradas = familias?.ToList() ?? new List<FamiliaItem>();
                }
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    // Toggle para colapsar/expandir la ubicación seleccionada
    private void ToggleUbicacionCollapse()
    {
        ubicacionCollapsed = !ubicacionCollapsed;
        StateHasChanged();
    }

    // Métodos para el componente DataGrid
    private List<ColumnConfig> GetProductoColumns()
    {
        // Usar lista persistente para que no se pierda la visibilidad al re-renderizar
        if (gridColumns == null || gridColumns.Count == 0)
        {
            gridColumns = new List<ColumnConfig>
            {
                new() { Key = "rubro", Label = "Rub/Cód", IsVisible = false, Width = "100px", Order = 1, IsResizable = true },
                new() { Key = "producto", Label = "Producto", IsVisible = true, Width = "300px", Order = 2, IsResizable = true },
                new() { Key = "stock", Label = "Stock Actual", IsVisible = true, Width = "120px", Order = 3, IsResizable = true },
                new() { Key = "minimo", Label = "Mínimo", IsVisible = false, Width = "100px", Order = 4, IsResizable = true },
                new() { Key = "sugerido", Label = "Sugerido", IsVisible = false, Width = "100px", Order = 5, IsResizable = true },
                new() { Key = "codigoBarra", Label = "Código de barras", IsVisible = true, Width = "220px", Order = 6, IsResizable = true }
            };
        }
        return gridColumns;
    }

    private IEnumerable<object> GetProductosForGrid()
    {
        if (productosSeleccionados == null || !productosSeleccionados.Any())
            return Enumerable.Empty<object>();

        var data = productosSeleccionados.AsEnumerable();
        
        // Aplicar filtros
        if (!string.IsNullOrWhiteSpace(filtroTexto))
        {
            var t = filtroTexto.Trim().ToLowerInvariant();
            data = data.Where(p => 
            {
                var descripcion = p.Producto?.DescripcionLarga;
                return descripcion != null && descripcion.ToLowerInvariant().Contains(t);
            });
        }
        
        if (!string.IsNullOrWhiteSpace(filtroRubro))
        {
            var codigosRubro = GetCodigosRubroParaFiltrar();
            if (codigosRubro.Any())
            {
                var codigosSet = new HashSet<string>(codigosRubro.Select(c => c.ToLowerInvariant()), StringComparer.OrdinalIgnoreCase);
                
                data = data.Where(p => 
                {
                    var producto = p.Producto;
                    if (producto == null) return false;
                    
                    var rubroProducto = producto.RubroCodigo?.ToLowerInvariant() ?? string.Empty;
                    var descripcionProducto = producto.DescripcionLarga?.ToLowerInvariant() ?? string.Empty;
                    
                    return codigosSet.Any(codigo => 
                        rubroProducto.Contains(codigo) || descripcionProducto.Contains(codigo));
                });
            }
        }
        
        // Si la paginación/virtualización está activa, retornar sólo la página actual
        if (_useVirtualization)
        {
            return GetPaginatedProducts();
        }

        return data;
    }

    private object GetProductoValue(object item, string columnKey)
    {
        if (item is ProductoStock producto)
        {
            // Cache para evitar llamadas repetidas a IsMobileScreen()
            if (!_isMobileScreenCacheValid)
            {
                _isMobileScreenCached = IsMobileScreen();
                _isMobileScreenCacheValid = true;
            }
            
            // En móviles, mostrar información combinada para una mejor experiencia
            if (_isMobileScreenCached)
            {
                return columnKey switch
                {
                    "rubro" => producto.Producto?.RubroCodigo ?? string.Empty,
                    "producto" => producto.Producto?.DescripcionLarga ?? string.Empty, // Solo descripción, el rubro se muestra por separado
                    "stock" => inventarioEditable ? 
                        (object)new StockInputModel 
                        { 
                            Producto = producto, 
                            Value = (producto.CantidadInventario ?? producto.StockActual ?? 0).ToString(System.Globalization.CultureInfo.InvariantCulture),
                            OnInput = OnCantidadInput
                        } : 
                        // SOLO REMARCAR EN AMARILLO si el producto tiene stock controlado (está en inventario)
                        (producto.CantidadInventario.HasValue && producto.CantidadInventario != producto.StockActual) ?
                            $"<div style='display: inline-flex; align-items: center; white-space: nowrap; gap: 4px; min-width: 0;'><span style='background-color: #ffc107; color: #000; padding: 2px 6px; border-radius: 3px; font-weight: bold; flex-shrink: 0; min-width: max-content;'>{producto.CantidadInventario?.ToString("N2") ?? "0"}</span><span style='color: #666; flex-shrink: 0; min-width: max-content;'>({producto.StockActual?.ToString("N2") ?? "0"})</span></div>" :
                            $"Stock: {producto.StockActual?.ToString("N2") ?? "0"}",
                    "minimo" => producto.StockMinimo?.ToString("N3") ?? "0",
                    "sugerido" => producto.StockSugerido?.ToString("N3") ?? "0",
                    "codigoBarra" => producto.Producto?.CodigoBarra ?? string.Empty,
                    _ => string.Empty
                };
            }
            else
            {
                // En pantallas grandes, mostrar información normal
                return columnKey switch
                {
                    "rubro" => producto.Producto?.RubroCodigo ?? string.Empty,
                    "producto" => producto.Producto?.DescripcionLarga ?? string.Empty,
                    "stock" => inventarioEditable ? 
                        (object)new StockInputModel 
                        { 
                            Producto = producto, 
                            Value = (producto.CantidadInventario ?? producto.StockActual ?? 0).ToString(System.Globalization.CultureInfo.InvariantCulture),
                            OnInput = OnCantidadInput
                        } : 
                        // SOLO REMARCAR EN AMARILLO si el producto tiene stock controlado (está en inventario)
                        (producto.CantidadInventario.HasValue && producto.CantidadInventario != producto.StockActual) ?
                            $"<div style='display: inline-flex; align-items: center; white-space: nowrap; gap: 4px; min-width: 0;'><span style='background-color: #ffc107; color: #000; padding: 2px 6px; border-radius: 3px; font-weight: bold; flex-shrink: 0; min-width: max-content;'>{producto.CantidadInventario?.ToString("N2") ?? "0"}</span><span style='color: #666; flex-shrink: 0; min-width: max-content;'>({producto.StockActual?.ToString("N2") ?? "0"})</span></div>" :
                            producto.StockActual?.ToString("N2") ?? "0",
                    "minimo" => producto.StockMinimo?.ToString("N3") ?? "0",
                    "sugerido" => producto.StockSugerido?.ToString("N3") ?? "0",
                    "codigoBarra" => producto.Producto?.CodigoBarra ?? string.Empty,
                    _ => string.Empty
                };
            }
        }
        return string.Empty;
    }

    // Métodos para configuración de columnas
    private async Task OnColumnContextMenu(MouseEventArgs e)
    {
        showColumnConfigModal = true;
        await LoadColumnConfig();
        StateHasChanged();
    }

    // Método que se ejecuta automáticamente cuando cambia la visibilidad de una columna
    private async Task OnColumnVisibilityChanged(ChangeEventArgs e, ColumnConfig column)
    {
        try
        {
            // Actualizar el valor de la columna
            column.IsVisible = (bool)e.Value;
            
            // Guardar configuración automáticamente
            var config = availableColumns.ToDictionary(c => c.Key, c => c.IsVisible);
            var configJson = System.Text.Json.JsonSerializer.Serialize(config);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "columnConfig_Productos en Stock", configJson);
            
            // Sincronizar con gridColumns
            if (gridColumns == null || gridColumns.Count == 0)
            {
                gridColumns = GetProductoColumns();
            }
            foreach (var gc in gridColumns)
            {
                if (config.ContainsKey(gc.Key))
                {
                    gc.IsVisible = config[gc.Key];
                }
            }
            
            Console.WriteLine($"✅ Configuración de columnas guardada automáticamente - {column.Label}: {column.IsVisible}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error guardando configuración automáticamente: {ex.Message}");
        }
    }

    private async Task StartColumnResize(MouseEventArgs e)
    {
        if (e.Button == 0) // Solo botón izquierdo
        {
            isResizingColumn = true;
            startX = e.ClientX;
            // Aquí se implementaría la lógica de redimensionamiento
            await JSRuntime.InvokeVoidAsync("startColumnResize", e.ClientX);
        }
    }

    private async Task LoadColumnConfig()
    {
        if (!availableColumns.Any())
        {
            availableColumns = new List<ColumnConfig>
            {
                new() { Key = "rubro", Label = "Rub/Cód", IsVisible = false },
                new() { Key = "producto", Label = "Producto", IsVisible = true },
                new() { Key = "stock", Label = "Stock Actual", IsVisible = true },
                new() { Key = "minimo", Label = "Mínimo", IsVisible = false },
                new() { Key = "sugerido", Label = "Sugerido", IsVisible = false },
                new() { Key = "codigoBarra", Label = "Código de barras", IsVisible = true }
            };
        }

        // Cargar configuración desde cookies
        try
        {
            // Usar la misma clave que DataGrid para mantener consistencia
            var savedConfig = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "columnConfig_Productos en Stock");
            if (!string.IsNullOrEmpty(savedConfig))
            {
                var config = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, bool>>(savedConfig);
                foreach (var column in availableColumns)
                {
                    if (config.ContainsKey(column.Key))
                    {
                        column.IsVisible = config[column.Key];
                    }
                }
                // Sincronizar con gridColumns para que la grilla respete la configuración
                if (gridColumns == null || gridColumns.Count == 0)
                {
                    gridColumns = GetProductoColumns();
                }
                foreach (var gc in gridColumns)
                {
                    if (config.ContainsKey(gc.Key))
                    {
                        gc.IsVisible = config[gc.Key];
                    }
                }
            }
        }
        catch
        {
            // Usar configuración por defecto si hay error
        }
    }

    private async Task SaveColumnConfig()
    {
        try
        {
            var config = availableColumns.ToDictionary(c => c.Key, c => c.IsVisible);
            var configJson = System.Text.Json.JsonSerializer.Serialize(config);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "columnConfig_Productos en Stock", configJson);
            // Sincronizar con gridColumns
            if (gridColumns == null || gridColumns.Count == 0)
            {
                gridColumns = GetProductoColumns();
            }
            foreach (var gc in gridColumns)
            {
                if (config.ContainsKey(gc.Key))
                {
                    gc.IsVisible = config[gc.Key];
                }
            }
            showColumnConfigModal = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar configuración: {ex.Message}";
        }
    }

    private async Task ResetColumnConfig()
    {
        // Configuración por defecto: solo Producto, Stock Actual y Código de barras
        foreach (var column in availableColumns)
        {
            column.IsVisible = column.Key == "producto" || column.Key == "stock" || column.Key == "codigoBarra";
        }
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "columnConfig_Productos en Stock");
        if (gridColumns != null)
        {
            foreach (var gc in gridColumns) 
            {
                gc.IsVisible = gc.Key == "producto" || gc.Key == "stock" || gc.Key == "codigoBarra";
            }
        }
        StateHasChanged();
    }

    // Cargar configuración de columnas específicamente para la grilla (persistente)
    private async Task LoadGridColumnConfig()
    {
        try
        {
            if (gridColumns == null || gridColumns.Count == 0)
            {
                gridColumns = new List<ColumnConfig>
                {
                    new() { Key = "rubro", Label = "Rub/Cód", IsVisible = false, Width = "100px", Order = 1, IsResizable = true },
                    new() { Key = "producto", Label = "Producto", IsVisible = true, Width = "300px", Order = 2, IsResizable = true },
                    new() { Key = "stock", Label = "Stock Actual", IsVisible = true, Width = "120px", Order = 3, IsResizable = true },
                    new() { Key = "minimo", Label = "Mínimo", IsVisible = false, Width = "100px", Order = 4, IsResizable = true },
                    new() { Key = "sugerido", Label = "Sugerido", IsVisible = false, Width = "100px", Order = 5, IsResizable = true },
                    new() { Key = "codigoBarra", Label = "Código de barras", IsVisible = true, Width = "220px", Order = 6, IsResizable = true }
                };
            }

            var savedConfig = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "columnConfig_Productos en Stock");
            if (!string.IsNullOrEmpty(savedConfig))
            {
                var config = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, bool>>(savedConfig);
                foreach (var col in gridColumns)
                {
                    if (config.ContainsKey(col.Key))
                    {
                        col.IsVisible = config[col.Key];
                    }
                }
            }
        }
        catch { }
    }



    // ========================================
    // MÉTODOS PARA QR SCANNER
    // ========================================
    
    /// <summary>
    /// Abre el modal QR para escanear ubicaciones
    /// </summary>
    private async Task AbrirQRScanner()
    {
        try
        {
            showQRModal = true;
            qrDetectedValue = string.Empty;
            isCameraActive = false;
            StateHasChanged();
            
            // Esperar a que se renderice el modal
            await Task.Delay(200);
            
            // Solo inicializar, no activar la cámara automáticamente
            await JSRuntime.InvokeVoidAsync("initQRScanner");
            
            Console.WriteLine("✅ Modal QR abierto. El usuario debe hacer clic en 'Activar Cámara'");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error abriendo QR scanner: {ex.Message}");
        }
    }
    
    /// <summary>
    /// Cierra el modal QR de forma segura y forzada
    /// </summary>
    private async Task CerrarQRModal()
    {
        try
        {
            Console.WriteLine("🚪 ====== CERRAR MODAL QR ======");
            
            // Cancelar cualquier operación de cámara en curso
            if (cameraCancellationToken != null)
            {
                cameraCancellationToken.Cancel();
                cameraCancellationToken.Dispose();
                cameraCancellationToken = null;
            }
            
            // Detener la cámara si está activa
            if (isCameraActive)
            {
                Console.WriteLine("📷 Deteniendo cámara...");
                try
                {
                    await JSRuntime.InvokeVoidAsync("eval", @"
                        (function() {
                            try {
                                // Detener QrScanner si está activo
                                if (window.qrCodeReader) {
                                    window.qrCodeReader.stop();
                                    window.qrCodeReader.destroy();
                                    window.qrCodeReader = null;
                                }
                                
                                // Detener stream de video
                                const video = document.getElementById('qr-video');
                                if (video && video.srcObject) {
                                    const tracks = video.srcObject.getTracks();
                                    tracks.forEach(track => track.stop());
                                    video.srcObject = null;
                                }
                                
                                window.isQRScannerActive = false;
                                console.log('✅ Cámara detenida correctamente');
                            } catch (error) {
                                console.error('❌ Error deteniendo cámara:', error);
                            }
                        })();
                    ");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"⚠️ Error deteniendo cámara: {ex.Message}");
                }
            }
            
            // Limpiar todos los estados
            showQRModal = false;
            qrDetectedValue = string.Empty;
            isCameraActive = false;
            isCameraLoading = false;
            cameraErrorMessage = string.Empty;
            
            // Forzar actualización del estado
            StateHasChanged();
            
            Console.WriteLine("✅ Modal QR cerrada correctamente");
            
            // Restaurar focus al textbox de código de barras después de cerrar la modal
            await Task.Delay(500); // Delay más largo para asegurar que la modal se cierre completamente
            
            // Verificar que la modal realmente se cerró antes de hacer focus
            try 
            { 
                var hasModal = await JSRuntime.InvokeAsync<bool>("hasOpenModal");
                if (!hasModal)
                {
                    await JSRuntime.InvokeVoidAsync("blazorFocusById", "barcodeInput");
                    Console.WriteLine("✅ Focus restaurado al textbox de código de barras después de cerrar modal QR");
                }
                else
                {
                    Console.WriteLine("⚠️ Modal aún abierta, no aplicando focus al textbox de código de barras");
                }
            } 
            catch (Exception ex)
            {
                Console.WriteLine($"Error restaurando focus después de cerrar modal QR: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error cerrando modal QR: {ex.Message}");
            
            // Forzar cierre en caso de error
            showQRModal = false;
            isCameraActive = false;
            isCameraLoading = false;
            cameraErrorMessage = string.Empty;
            StateHasChanged();
        }
    }
    
    /// <summary>
    /// Simula la detección de un QR generando un ID aleatorio
    /// </summary>
    private void SimularQR()
    {
        try
        {
            var random = new Random();
            qrDetectedValue = random.Next(1, 1000).ToString();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error simulando QR: {ex.Message}");
        }
    }
    
    /// <summary>
    /// Activa la cámara para escanear QR de forma simple y segura
    /// </summary>
    private async Task ActivarCamara()
    {
        try
        {
            Console.WriteLine($"📷 ====== ACTIVAR CÁMARA ======");
            
            // Verificar si ya está activa
            if (isCameraActive)
            {
                Console.WriteLine("📷 La cámara ya está activa");
                return;
            }
            
            // Verificar si ya está cargando
            if (isCameraLoading)
            {
                Console.WriteLine("📷 La cámara ya se está activando");
                return;
            }
            
            // Iniciar estado de carga
            isCameraLoading = true;
            cameraErrorMessage = string.Empty;
            StateHasChanged();
            
            // Crear token de cancelación con timeout de 10 segundos
            cameraCancellationToken = new CancellationTokenSource(TimeSpan.FromSeconds(10));
            
            Console.WriteLine("📷 Activando la cámara con timeout de 10 segundos...");
            
            // Usar método JavaScript directo con eval para evitar problemas de registro
            try
            {
                Console.WriteLine("📷 Activando cámara con método directo...");
                
                await JSRuntime.InvokeVoidAsync("eval", @"
                    (async function() {
                        try {
                            console.log('📷 ====== ACTIVAR CÁMARA DIRECTA ======');
                            
                            const video = document.getElementById('qr-video');
                            if (!video) {
                                console.error('❌ Elemento de video no encontrado');
                                throw new Error('Elemento de video no encontrado');
                            }
                            
                            // Verificar soporte básico
                            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                                console.error('❌ Navegador no soporta acceso a la cámara');
                                throw new Error('Tu navegador no soporta acceso a la cámara');
                            }
                            
                            console.log('📷 Solicitando acceso a la cámara...');
                            
                            // Configuración simple y confiable
                            const constraints = {
                                video: {
                                    facingMode: 'environment',
                                    width: { ideal: 640 },
                                    height: { ideal: 480 }
                                }
                            };
                            
                            const stream = await navigator.mediaDevices.getUserMedia(constraints);
                            video.srcObject = stream;
                            await video.play();
                            
                            console.log('✅ Cámara activada correctamente');
                            
                            // Inicializar detección QR simple
                            if (typeof QrScanner !== 'undefined') {
                                console.log('🔍 Inicializando QrScanner...');
                                const qrCodeReader = new QrScanner(video, result => {
                                    console.log('✅ QR detectado:', result);
                                    if (window.blazorComponent) {
                                        window.blazorComponent.invokeMethodAsync('OnQRDetected', result);
                                    }
                                });
                                await qrCodeReader.start();
                                window.qrCodeReader = qrCodeReader;
                                window.isQRScannerActive = true;
                            } else {
                                console.log('⚠️ QrScanner no disponible, usando detección manual');
                                window.isQRScannerActive = true;
                            }
                            
                        } catch (error) {
                            console.error('❌ Error activando cámara:', error);
                            throw error;
                        }
                    })();
                ");
            }
            catch (Exception jsEx)
            {
                Console.WriteLine($"❌ Error en JavaScript: {jsEx.Message}");
                throw new Exception($"Error activando cámara: {jsEx.Message}");
            }
            
            // Actualizar estado
            isCameraActive = true;
            isCameraLoading = false;
            StateHasChanged();
            
            Console.WriteLine("✅ Cámara activada correctamente");
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("⏰ Timeout activando cámara");
            cameraErrorMessage = "Timeout: La cámara tardó demasiado en activarse";
            isCameraLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error activando cámara: {ex.Message}");
            cameraErrorMessage = $"Error: {ex.Message}";
            isCameraLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Solicita permisos de cámara explícitamente
    /// </summary>
    private async Task SolicitarPermisosCamara()
    {
        try
        {
            Console.WriteLine("Solicitando permisos de cámara...");
            var success = await JSRuntime.InvokeAsync<bool>("requestCameraPermissions");
            
            if (success)
            {
                Console.WriteLine("Permisos de cámara concedidos");
                await JSRuntime.InvokeVoidAsync("showQRResult", "Permisos concedidos. Ahora puedes activar la cámara.");
                await JSRuntime.InvokeVoidAsync("hidePermissionRequest");
            }
            else
            {
                Console.WriteLine("Permisos de cámara denegados");
                await JSRuntime.InvokeVoidAsync("showQRError", 
                    "Permisos denegados. Por favor, permite el acceso a la cámara en la configuración del navegador.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error solicitando permisos: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showQRError", 
                $"Error solicitando permisos: {ex.Message}");
        }
    }

    /// <summary>
    /// Solicita permisos de cámara manualmente con método más agresivo
    /// </summary>
    private async Task SolicitarPermisosManualmente()
    {
        try
        {
            Console.WriteLine("🎯 ====== SOLICITANDO PERMISOS MANUALMENTE ======");
            Console.WriteLine("🎯 Estado actual de la cámara: {isCameraActive}");
            
            // Resetear permisos primero
            await JSRuntime.InvokeVoidAsync("resetCameraPermissions");
            
            // Esperar un momento
            await Task.Delay(500);
            
            // Intentar activar la cámara con método más directo
            await JSRuntime.InvokeVoidAsync("forceCameraActivation");
            
            // Actualizar estado de la cámara
            isCameraActive = true;
            StateHasChanged();
            
            Console.WriteLine("✅ Permisos solicitados y cámara activada");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error solicitando permisos manualmente: {ex.Message}");
            Console.WriteLine($"❌ Stack trace: {ex.StackTrace}");
        }
    }
    
    /// <summary>
    /// Busca la ubicación por el ID del QR y la selecciona
    /// </summary>
    private async Task BuscarPorQR()
    {
        try
        {
            if (int.TryParse(qrDetectedValue, out int productoUbicacionID))
            {
                // Cerrar el modal primero
                CerrarQRModal();
                
                // Buscar la ubicación por ID
                await BuscarUbicacionPorID(productoUbicacionID);
            }
            else
            {
                Console.WriteLine("QR value no es un número válido");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en BuscarPorQR: {ex.Message}");
        }
    }
    
    /// <summary>
    /// Busca una ubicación por su ProductoUbicacionID y la selecciona automáticamente
    /// Este método es llamado cuando se detecta un QR con un ProductoUbicacionID válido
    /// </summary>
    /// <param name="productoUbicacionID">ID de la ubicación a buscar</param>
    private async Task BuscarUbicacionPorID(int productoUbicacionID)
    {
        try
        {
            Console.WriteLine($"🔍 Buscando ubicación con ProductoUbicacionID: {productoUbicacionID}");
            
            // Buscar el nodo por ProductoUbicacionID en el árbol
            var nodoEncontrado = FindNodeById(rootNodes, productoUbicacionID);
            
            if (nodoEncontrado != null)
            {
                Console.WriteLine($"✅ Ubicación encontrada: {nodoEncontrado.Item.Descripcion} (Nivel: {nodoEncontrado.Level})");
                
                // Seleccionar el nodo encontrado usando el método existente
                // Esto automáticamente cargará los productos de esa ubicación
                await SelectNodeFromJS(
                    nodoEncontrado.Item.ProductoUbicacionID, 
                    nodoEncontrado.Item.Descripcion, 
                    nodoEncontrado.Level, 
                    nodoEncontrado.Item.Orden
                );
                
                Console.WriteLine($"🎯 Ubicación seleccionada y productos cargados automáticamente: {nodoEncontrado.Item.Descripcion}");
            }
            else
            {
                Console.WriteLine($"❌ No se encontró la ubicación con ProductoUbicacionID: {productoUbicacionID}");
                Console.WriteLine("💡 Verifica que el ID del QR corresponda a una ubicación válida en el sistema");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error buscando ubicación por ID {productoUbicacionID}: {ex.Message}");
        }
    }
    
    /// <summary>
    /// Método invocable desde JavaScript cuando se detecta un QR
    /// </summary>
    /// <param name="qrValue">Valor detectado del QR</param>
    [JSInvokable]
    public void OnQRDetected(string qrValue)
    {
        try
        {
            qrDetectedValue = qrValue;
            
            // Mostrar el resultado en la UI
            _ = JSRuntime.InvokeVoidAsync("showQRResult", $"QR: {qrValue}");
            
            // Habilitar el botón de búsqueda
            _ = JSRuntime.InvokeVoidAsync("enableQRSearchButton");
            
            // Intentar extraer ProductoUbicacionID del QR
            int? productoUbicacionID = null;
            
            // Primero intentar parsear como JSON
            try
            {
                var jsonDoc = System.Text.Json.JsonDocument.Parse(qrValue);
                if (jsonDoc.RootElement.TryGetProperty("ProductoUbicacionID", out var idElement))
                {
                    if (idElement.TryGetInt32(out int id))
                    {
                        productoUbicacionID = id;
                        Console.WriteLine($"📱 QR JSON detectado: ProductoUbicacionID = {id}");
                    }
                }
            }
            catch
            {
                // Si no es JSON válido, intentar parsear como número directo
                if (int.TryParse(qrValue, out int directId))
                {
                    productoUbicacionID = directId;
                    Console.WriteLine($"📱 QR número directo detectado: {directId}");
                }
            }
            
            // Si se encontró un ProductoUbicacionID válido, procesar automáticamente
            if (productoUbicacionID.HasValue)
            {
                Console.WriteLine($"🚀 Iniciando procesamiento automático del QR...");
                
                // Cerrar el modal QR automáticamente después de 1 segundo
                _ = Task.Run(async () =>
                {
                    await Task.Delay(1000); // Esperar 1 segundo
                    await InvokeAsync(async () =>
                    {
                        try
                        {
                            Console.WriteLine($"⏱️ Esperando 1 segundo antes de procesar...");
                            
                            // Cerrar el modal QR
                            await CerrarQRModal();
                            
                            // Buscar y seleccionar la ubicación automáticamente
                            await BuscarUbicacionPorID(productoUbicacionID.Value);
                            
                            Console.WriteLine($"✅ QR detectado y procesado automáticamente: ProductoUbicacionID = {productoUbicacionID.Value}");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"❌ Error procesando QR automáticamente: {ex.Message}");
                        }
                    });
                });
            }
            else
            {
                Console.WriteLine($"❌ QR no contiene un ProductoUbicacionID válido: {qrValue}");
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en OnQRDetected: {ex.Message}");
        }
    }

    // Botón QR (sin acción por ahora)
    private Task OnQrUbicaciones()
    {
        return Task.CompletedTask;
    }
}

<script>
    // Nuevo sistema de resize simplificado
    window.initResize = function() {
        const resizeHandle = document.querySelector('.resize-handle');
        const leftPanel = document.querySelector('.left-panel');
        const rightPanel = document.querySelector('.right-panel');
        
        if (!resizeHandle || !leftPanel || !rightPanel) return;
        
        let isResizing = false;
        
        resizeHandle.addEventListener('mousedown', function(e) {
            e.preventDefault();
            isResizing = true;
            document.body.style.cursor = 'col-resize';
            document.body.style.userSelect = 'none';
        });
        
        document.addEventListener('mousemove', function(e) {
            if (!isResizing) return;
            
            const container = leftPanel.parentElement;
            const containerRect = container.getBoundingClientRect();
            const containerWidth = containerRect.width;
            const mouseX = e.clientX - containerRect.left;
            
            // Calcular porcentajes
            const leftPercent = (mouseX / containerWidth) * 100;
            const rightPercent = 100 - leftPercent;
            
            // Limitar entre 20% y 80%
            const clampedLeft = Math.max(20, Math.min(80, leftPercent));
            const clampedRight = 100 - clampedLeft;
            
            // Aplicar anchos
            leftPanel.style.width = clampedLeft + '%';
            rightPanel.style.width = clampedRight + '%';
        });
        
        document.addEventListener('mouseup', function() {
            if (isResizing) {
                isResizing = false;
                document.body.style.cursor = '';
                document.body.style.userSelect = '';
            }
        });
    }

    window.forceMobileStyles = function () {
        const isMobile = window.innerWidth <= 768;
        console.log('🔍 forceMobileStyles - isMobile:', isMobile, 'width:', window.innerWidth);
        
        // ELIMINAR COMPLETAMENTE EL DIV AZUL MOLESTO EN MÓVILES
        if (isMobile) {
            const selectedLocationDivs = document.querySelectorAll('.selected-location, div[style*="background: linear-gradient(135deg, #e3f2fd"], div[style*="border: 2px solid #007bff"]');
            selectedLocationDivs.forEach(div => {
                div.style.display = 'none !important';
                div.style.visibility = 'hidden !important';
                div.style.opacity = '0 !important';
                div.style.height = '0 !important';
                div.style.width = '0 !important';
                div.style.position = 'absolute !important';
                div.style.left = '-9999px !important';
                div.style.top = '-9999px !important';
                div.style.zIndex = '-9999 !important';
                div.style.margin = '0 !important';
                div.style.padding = '0 !important';
                div.style.border = 'none !important';
                div.style.boxShadow = 'none !important';
                div.style.background = 'transparent !important';
            });
        } else {
            // EN PANTALLA COMPLETA: RESTAURAR TODO
            console.log('🖥️ Pantalla completa detectada - restaurando estilos');
            const selectedLocationDivs = document.querySelectorAll('.selected-location, div[style*="background: linear-gradient(135deg, #e3f2fd"], div[style*="border: 2px solid #007bff"]');
            selectedLocationDivs.forEach(div => {
                div.style.display = '';
                div.style.visibility = '';
                div.style.opacity = '';
                div.style.height = '';
                div.style.width = '';
                div.style.position = '';
                div.style.left = '';
                div.style.top = '';
                div.style.zIndex = '';
                div.style.margin = '';
                div.style.padding = '';
                div.style.border = '';
                div.style.boxShadow = '';
                div.style.background = '';
            });
        }
        
        // Manejar el panel de productos en móviles/desktop
        const rightPanel = document.querySelector('.right-panel');
        if (rightPanel) {
            if (!isMobile) {
                // En desktop, restaurar estilos normales
                console.log('🖥️ Restaurando panel derecho para desktop');
                rightPanel.style.display = '';
                rightPanel.style.width = '';
                rightPanel.style.height = '';
                rightPanel.style.overflow = '';
                rightPanel.style.visibility = '';
                rightPanel.style.flex = '';
                rightPanel.style.minWidth = '';
                rightPanel.style.maxWidth = '';
                rightPanel.classList.remove('show-on-mobile');
            } else {
                // En móvil: SIEMPRE mostrar el panel derecho
                console.log('📱 Configurando panel derecho para móvil - FORZANDO VISIBILIDAD');
                rightPanel.classList.add('show-on-mobile');
                rightPanel.style.display = 'flex !important';
                rightPanel.style.width = '100% !important';
                rightPanel.style.height = 'auto !important';
                rightPanel.style.visibility = 'visible !important';
                rightPanel.style.opacity = '1 !important';
                rightPanel.style.position = 'relative !important';
                rightPanel.style.zIndex = '1 !important';
                rightPanel.classList.remove('panel-hidden');
            }
        }

        // Ocultar/mostrar resize handle
        const resizeHandle = document.querySelector('.resize-handle');
        if (resizeHandle) {
            if (isMobile) {
                resizeHandle.style.display = 'none !important';
            } else {
                resizeHandle.style.display = '';
            }
        }

        // Forzar que el panel izquierdo ocupe toda la pantalla en móviles
        const leftPanel = document.querySelector('.left-panel');
        if (leftPanel) {
            if (isMobile) {
                console.log('📱 Configurando panel izquierdo para móvil - FORZANDO VISIBILIDAD');
                leftPanel.style.display = 'flex !important';
                leftPanel.style.width = '100% !important';
                leftPanel.style.height = 'calc(100vh - 100px) !important';
                leftPanel.style.minHeight = 'calc(100vh - 100px) !important';
                leftPanel.style.maxHeight = 'calc(100vh - 100px) !important';
                leftPanel.style.background = 'linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%) !important';
                leftPanel.style.borderRadius = '12px !important';
                leftPanel.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.15) !important';
                leftPanel.style.margin = '8px !important';
                leftPanel.style.flex = '1 !important';
                leftPanel.style.maxWidth = 'none !important';
                leftPanel.style.minWidth = '100% !important';
                leftPanel.style.visibility = 'visible !important';
                leftPanel.style.opacity = '1 !important';
                leftPanel.style.position = 'relative !important';
                leftPanel.style.zIndex = '1 !important';
                leftPanel.classList.remove('panel-hidden');
            } else {
                console.log('🖥️ Restaurando panel izquierdo para desktop');
                leftPanel.style.display = '';
                leftPanel.style.width = '';
                leftPanel.style.height = '';
                leftPanel.style.minHeight = '';
                leftPanel.style.maxHeight = '';
                leftPanel.style.background = '';
                leftPanel.style.borderRadius = '';
                leftPanel.style.boxShadow = '';
                leftPanel.style.margin = '';
                leftPanel.style.flex = '';
                leftPanel.style.maxWidth = '';
                leftPanel.style.minWidth = '';
                leftPanel.style.visibility = '';
                leftPanel.style.opacity = '';
                leftPanel.style.position = '';
                leftPanel.style.zIndex = '';
            }
        }

        // Aplicar estilos al header solo en móviles
        const header = document.querySelector('.depositos-header');
        if (header) {
            if (isMobile) {
                console.log('📱 Aplicando estilos de header para móvil');
                header.style.background = 'linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%) !important';
                header.style.borderRadius = '0 0 16px 16px !important';
                header.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.1) !important';
                header.style.marginBottom = '8px !important';
                header.style.padding = '1rem !important';
                header.style.display = 'flex !important';
                header.style.alignItems = 'center !important';
                header.style.justifyContent = 'space-between !important';
                header.style.flexWrap = 'wrap !important';
                header.style.gap = '1rem !important';
            } else {
                console.log('🖥️ Restaurando estilos de header para desktop');
                header.style.background = '';
                header.style.borderRadius = '';
                header.style.boxShadow = '';
                header.style.marginBottom = '';
                header.style.padding = '';
                header.style.display = '';
                header.style.alignItems = '';
                header.style.justifyContent = '';
                header.style.flexWrap = '';
                header.style.gap = '';
            }
        }
    };

    // Funciones JavaScript para manejo de paneles
    window.toggleLocationsPanel = function (isHidden) {
        const leftPanel = document.querySelector('.left-panel');
        const rightPanel = document.querySelector('.right-panel');
        const resizeHandle = document.querySelector('.resize-handle');
        
        console.log('🔥 toggleLocationsPanel - isHidden:', isHidden);
        console.log('🔥 leftPanel encontrado:', leftPanel);
        
        if (leftPanel && rightPanel) {
            if (isHidden) {
                // OCULTAR COMPLETAMENTE el panel de ubicaciones
                leftPanel.style.display = 'none';
                leftPanel.style.width = '0';
                leftPanel.style.minWidth = '0';
                leftPanel.style.maxWidth = '0';
                leftPanel.style.flex = '0';
                leftPanel.style.flexGrow = '0';
                leftPanel.style.flexShrink = '0';
                leftPanel.style.flexBasis = '0';
                leftPanel.style.overflow = 'hidden';
                leftPanel.style.visibility = 'hidden';
                leftPanel.style.opacity = '0';
                leftPanel.style.position = 'absolute';
                leftPanel.style.zIndex = '-1';
                
                // Mostrar panel de productos
                rightPanel.style.display = 'flex';
                rightPanel.style.width = '100%';
                rightPanel.style.minWidth = '100%';
                rightPanel.style.maxWidth = '100%';
                rightPanel.style.flex = '1';
                rightPanel.style.flexGrow = '1';
                rightPanel.style.flexShrink = '0';
                rightPanel.style.flexBasis = '100%';
                rightPanel.style.visibility = 'visible';
                rightPanel.style.opacity = '1';
                rightPanel.style.position = 'relative';
                rightPanel.style.zIndex = '1';
                
                // Ocultar resize handle
                if (resizeHandle) {
                    resizeHandle.style.display = 'none';
                }
            } else {
                // Mostrar panel de ubicaciones
                leftPanel.style.display = 'flex';
                leftPanel.style.width = '35%';
                leftPanel.style.minWidth = '280px';
                leftPanel.style.maxWidth = '70%';
                leftPanel.style.flex = '0 0 35%';
                leftPanel.style.flexGrow = '0';
                leftPanel.style.flexShrink = '0';
                leftPanel.style.flexBasis = '35%';
                leftPanel.style.overflow = 'auto';
                leftPanel.style.visibility = 'visible';
                leftPanel.style.opacity = '1';
                leftPanel.style.position = 'relative';
                leftPanel.style.zIndex = '1';
                
                // Ocultar panel de productos
                rightPanel.style.display = 'none';
                rightPanel.style.width = '0';
                rightPanel.style.minWidth = '0';
                rightPanel.style.maxWidth = '0';
                rightPanel.style.flex = '0';
                rightPanel.style.flexGrow = '0';
                rightPanel.style.flexShrink = '0';
                rightPanel.style.flexBasis = '0';
                rightPanel.style.overflow = 'hidden';
                rightPanel.style.visibility = 'hidden';
                rightPanel.style.opacity = '0';
                rightPanel.style.position = 'absolute';
                rightPanel.style.zIndex = '-1';
                
                // Mostrar resize handle
                if (resizeHandle) {
                    resizeHandle.style.display = 'block';
                }
            }
        }
    };

    window.toggleProductsPanel = function (isHidden) {
        const rightPanel = document.querySelector('.right-panel');
        const leftPanel = document.querySelector('.left-panel');
        const resizeHandle = document.querySelector('.resize-handle');
        const isMobile = window.innerWidth <= 768;

        console.log('🔥 toggleProductsPanel - isHidden:', isHidden);
        console.log('🔥 rightPanel encontrado:', rightPanel);
        
        if (rightPanel && leftPanel) {
            if (isHidden) {
                // Ocultar panel de productos
                rightPanel.style.display = 'none';
                rightPanel.style.width = '0';
                rightPanel.style.minWidth = '0';
                rightPanel.style.maxWidth = '0';
                rightPanel.style.flex = '0';
                rightPanel.style.flexGrow = '0';
                rightPanel.style.flexShrink = '0';
                rightPanel.style.flexBasis = '0';
                rightPanel.style.overflow = 'hidden';
                rightPanel.style.visibility = 'hidden';
                rightPanel.style.opacity = '0';
                rightPanel.style.position = 'absolute';
                rightPanel.style.zIndex = '-1';
                
                // Mostrar panel de ubicaciones
                leftPanel.style.display = 'flex';
                leftPanel.style.width = '100%';
                leftPanel.style.minWidth = '100%';
                leftPanel.style.maxWidth = '100%';
                leftPanel.style.flex = '1';
                leftPanel.style.flexGrow = '1';
                leftPanel.style.flexShrink = '0';
                leftPanel.style.flexBasis = '100%';
                leftPanel.style.visibility = 'visible';
                leftPanel.style.opacity = '1';
                leftPanel.style.position = 'relative';
                leftPanel.style.zIndex = '1';
                
                // Ocultar resize handle
                if (resizeHandle) {
                    resizeHandle.style.display = 'none';
                }
            } else {
                // Mostrar panel de productos
                rightPanel.style.display = 'flex';
                rightPanel.style.width = isMobile ? '100%' : '65%';
                rightPanel.style.minWidth = isMobile ? '100%' : '300px';
                rightPanel.style.maxWidth = isMobile ? '100%' : '70%';
                rightPanel.style.flex = isMobile ? '1' : '0 0 65%';
                rightPanel.style.flexGrow = isMobile ? '1' : '0';
                rightPanel.style.flexShrink = '0';
                rightPanel.style.flexBasis = isMobile ? '100%' : '65%';
                rightPanel.style.visibility = 'visible';
                rightPanel.style.opacity = '1';
                rightPanel.style.position = 'relative';
                rightPanel.style.zIndex = '1';
                
                // Ajustar panel de ubicaciones
                leftPanel.style.display = isMobile ? 'none' : 'flex';
                leftPanel.style.width = isMobile ? '0' : '35%';
                leftPanel.style.minWidth = isMobile ? '0' : '280px';
                leftPanel.style.maxWidth = isMobile ? '0' : '70%';
                leftPanel.style.flex = isMobile ? '0' : '0 0 35%';
                leftPanel.style.flexGrow = isMobile ? '0' : '0';
                leftPanel.style.flexShrink = '0';
                leftPanel.style.flexBasis = isMobile ? '0' : '35%';
                leftPanel.style.overflow = isMobile ? 'hidden' : 'auto';
                leftPanel.style.visibility = isMobile ? 'hidden' : 'visible';
                leftPanel.style.opacity = isMobile ? '0' : '1';
                leftPanel.style.position = isMobile ? 'absolute' : 'relative';
                leftPanel.style.zIndex = isMobile ? '-1' : '1';
                
                // Mostrar resize handle solo en desktop
                if (resizeHandle) {
                    resizeHandle.style.display = isMobile ? 'none' : 'block';
                }
            }
        }
    };


    // Función para establecer la referencia del componente Blazor
    window.setBlazorComponent = function(component) {
        window.blazorComponent = component;
        console.log('🔥 BlazorComponent establecido:', window.blazorComponent);
    };

    // Función de prueba para verificar que las funciones se registran correctamente
    window.testFunction = function() {
        console.log('✅ Función de prueba ejecutada correctamente');
        return 'test ok';
    };

    // Función simplificada para activar cámara QR
    window.activateCameraSimple = async function() {
        try {
            console.log('📷 ====== ACTIVAR CÁMARA SIMPLE ======');
            
            const video = document.getElementById('qr-video');
            if (!video) {
                console.error('❌ Elemento de video no encontrado');
                throw new Error('Elemento de video no encontrado');
            }
            
            // Verificar soporte básico
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                console.error('❌ Navegador no soporta acceso a la cámara');
                throw new Error('Tu navegador no soporta acceso a la cámara');
            }
            
            console.log('📷 Solicitando acceso a la cámara...');
            
            // Configuración simple y confiable
            const constraints = {
                video: {
                    facingMode: 'environment',
                    width: { ideal: 640 },
                    height: { ideal: 480 }
                }
            };
            
            const stream = await navigator.mediaDevices.getUserMedia(constraints);
            video.srcObject = stream;
            await video.play();
            
            console.log('✅ Cámara activada correctamente');
            
            // Inicializar detección QR simple
            if (typeof QrScanner !== 'undefined') {
                console.log('🔍 Inicializando QrScanner...');
                qrCodeReader = new QrScanner(video, result => {
                    console.log('✅ QR detectado:', result);
                    if (window.blazorComponent) {
                        window.blazorComponent.invokeMethodAsync('OnQRDetected', result);
                    }
                });
                await qrCodeReader.start();
                isQRScannerActive = true;
            } else {
                console.log('⚠️ QrScanner no disponible, usando detección manual');
                isQRScannerActive = true;
            }
            
        } catch (error) {
            console.error('❌ Error activando cámara:', error);
            throw error;
        }
    };

    // Función para seleccionar nodos del árbol
    window.selectTreeNode = function(element) {
        console.log('🔥 JAVASCRIPT CLICK EN NODO');
        console.log('Element:', element);
        console.log('Descripción:', element.dataset.nodeDescripcion);
        console.log('ID:', element.dataset.nodeId);
        console.log('Orden:', element.dataset.nodeOrden);
        console.log('Nivel:', element.dataset.level);
        console.log('Todos los data attributes:', element.dataset);
        
        // Validar que tenemos los datos necesarios
        if (!element.dataset.nodeId || !element.dataset.nodeDescripcion) {
            console.error('❌ ERROR: Faltan datos del nodo');
            console.error('nodeId:', element.dataset.nodeId);
            console.error('nodeDescripcion:', element.dataset.nodeDescripcion);
            return;
        }
        
        // Remover selección anterior
        const previousSelected = document.querySelector('.tree-node.selected');
        if (previousSelected) {
            previousSelected.classList.remove('selected');
        }
        
        // Seleccionar nuevo nodo
        element.classList.add('selected');
        
        // Llamar al método C# usando la referencia del componente
        if (window.blazorComponent) {
            console.log('🔥 Invocando SelectNodeFromJS...');
            try {
                window.blazorComponent.invokeMethodAsync('SelectNodeFromJS', 
                    parseInt(element.dataset.nodeId),
                    element.dataset.nodeDescripcion,
                    parseInt(element.dataset.level),
                    element.dataset.nodeOrden
                ).then(() => {
                    console.log('✅ SelectNodeFromJS completado');
                }).catch(error => {
                    console.error('❌ Error en SelectNodeFromJS:', error);
                });
            } catch (error) {
                console.error('❌ Error al invocar SelectNodeFromJS:', error);
            }
        } else {
            console.log('ERROR: blazorComponent no está disponible');
        }
    };

    // Función para eliminar el div azul molesto
    window.removeBlueDiv = function() {
        const isMobile = window.innerWidth <= 768;
        if (isMobile) {
            // Buscar y eliminar TODOS los divs azules
            const blueDivs = document.querySelectorAll('.selected-location, div[style*="background: linear-gradient(135deg, #e3f2fd"], div[style*="border: 2px solid #007bff"], div[style*="border-radius: 12px"], div[style*="box-shadow: 0 4px 12px rgba(0, 123, 255, 0.15)"]');
            blueDivs.forEach(div => {
                div.remove(); // Eliminar completamente del DOM
            });
        }
    };

    // Función mejorada para detectar modales abiertas
    window.hasOpenModal = function() {
        // Verificar múltiples tipos de modales y estados
        const modalSelectors = [
            '.app-modal-backdrop', // Modal personalizada
            '.app-modal.show',
            '.modal.show',
            '.modal[style*="display: block"]',
            '[data-bs-modal="true"]',
            '.modal-backdrop.show',
            // Verificar si el body tiene overflow hidden (indicador de modal abierta)
            document.body.style.overflow === 'hidden'
        ];
        
        // Verificar si hay elementos de modal visibles
        const hasVisibleModal = modalSelectors.some(selector => {
            if (typeof selector === 'boolean') return selector;
            return document.querySelector(selector) !== null;
        });
        
        // Verificar también si hay algún modal con z-index alto (modal activa)
        const modals = document.querySelectorAll('.app-modal, .modal');
        const hasActiveModal = Array.from(modals).some(modal => {
            const style = window.getComputedStyle(modal);
            return style.display !== 'none' && 
                   style.visibility !== 'hidden' && 
                   parseInt(style.zIndex) > 1000;
        });
        
        // Verificación adicional: buscar elementos de modal que estén realmente visibles
        const allModals = document.querySelectorAll('.app-modal, .modal, [class*="modal"]');
        const hasVisibleModalElement = Array.from(allModals).some(modal => {
            const rect = modal.getBoundingClientRect();
            const style = window.getComputedStyle(modal);
            return rect.width > 0 && 
                   rect.height > 0 && 
                   style.display !== 'none' && 
                   style.visibility !== 'hidden' &&
                   style.opacity !== '0';
        });
        
        const result = hasVisibleModal || hasActiveModal || hasVisibleModalElement;
        console.log('🔍 hasOpenModal - hasVisibleModal:', hasVisibleModal, 'hasActiveModal:', hasActiveModal, 'hasVisibleModalElement:', hasVisibleModalElement, 'result:', result);
        
        return result;
    };

    // Función para asegurar focus en el textbox de código de barras
    window.ensureBarcodeFocus = function() {
        const isMobile = window.innerWidth <= 768;
        console.log('🔍 ensureBarcodeFocus - isMobile:', isMobile, 'width:', window.innerWidth);
        
        // Verificar si hay alguna modal abierta usando la función mejorada
        if (window.hasOpenModal()) {
            console.log('🚫 Modal abierta detectada, no aplicando focus al textbox de código de barras');
            return false;
        }
        
        // Aplicar focus en todas las pantallas, no solo móviles
        const barcodeInput = document.getElementById('barcodeInput');
        if (barcodeInput) {
            try {
                // Asegurar que el elemento esté visible
                barcodeInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
                
                // Enfocar y seleccionar texto
                barcodeInput.focus();
                barcodeInput.select();
                
                // Verificar que el focus se aplicó correctamente
                if (document.activeElement === barcodeInput) {
                    console.log('✅ Focus aplicado correctamente al textbox de código de barras');
                    return true;
                } else {
                    console.log('⚠️ Focus no se aplicó correctamente, reintentando...');
                    // Reintentar después de un breve delay
                    setTimeout(() => {
                        if (!window.hasOpenModal()) {
                            barcodeInput.focus();
                            barcodeInput.select();
                        }
                    }, 100);
                    return false;
                }
            } catch (error) {
                console.log('❌ Error aplicando focus al textbox de código de barras:', error);
                return false;
            }
        } else {
            console.log('❌ No se encontró el textbox de código de barras');
            return false;
        }
    };

    // Función genérica para hacer focus por ID
    window.blazorFocusById = function(elementId) {
        console.log('🎯 blazorFocusById - Buscando elemento:', elementId);
        
        // Si es el textbox de código de barras, verificar si hay modales abiertas
        if (elementId === 'barcodeInput') {
            if (window.hasOpenModal()) {
                console.log('🚫 Modal abierta detectada, no aplicando focus al textbox de código de barras');
                return false;
            }
        }
        
        const element = document.getElementById(elementId);
        if (element) {
            try {
                element.focus();
                // Si es un input, seleccionar el texto
                if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                    element.select();
                }
                console.log('✅ Focus aplicado a:', elementId);
                return true;
            } catch (error) {
                console.log('❌ Error aplicando focus a:', elementId, error);
                return false;
            }
        } else {
            console.log('❌ Elemento no encontrado:', elementId);
            return false;
        }
    };

    // Función mejorada para focus del textbox de código de barras
    window.focusBarcodeInput = function() {
        console.log('🎯 focusBarcodeInput - Aplicando focus al textbox de código de barras');
        
        // Verificar si hay alguna modal abierta (múltiples selectores para mayor compatibilidad)
        const hasOpenModal = document.querySelector('.app-modal.show') !== null || 
                            document.querySelector('.modal.show') !== null ||
                            document.querySelector('[data-bs-modal="true"]') !== null ||
                            document.querySelector('.modal[style*="display: block"]') !== null;
        if (hasOpenModal) {
            console.log('🚫 Modal abierta detectada, no aplicando focus al textbox de código de barras');
            return false;
        }
        
        const barcodeInput = document.getElementById('barcodeInput');
        if (barcodeInput) {
            try {
                // Asegurar que el elemento esté visible
                barcodeInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
                
                // Aplicar focus
                barcodeInput.focus();
                barcodeInput.select();
                
                // Verificar que el focus se aplicó correctamente
                if (document.activeElement === barcodeInput) {
                    console.log('✅ Focus aplicado correctamente al textbox de código de barras');
                    return true;
                } else {
                    console.log('⚠️ Focus no se aplicó correctamente, reintentando...');
                    // Reintentar después de un breve delay
                    setTimeout(() => {
                        barcodeInput.focus();
                        barcodeInput.select();
                    }, 100);
                    return false;
                }
            } catch (error) {
                console.log('❌ Error aplicando focus al textbox de código de barras:', error);
                return false;
            }
        } else {
            console.log('❌ No se encontró el textbox de código de barras');
            return false;
        }
    };

    // Función para seleccionar texto en la modal de producto
    window.selectTextInModal = function() {
        console.log('🎯 selectTextInModal - Iniciando selección en modal de producto');
        const modalStockInput = document.getElementById('modalStockActual');
        if (modalStockInput) {
            // Asegurar que el elemento esté visible
            modalStockInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            // PRIMERO: Solo hacer focus para abrir el teclado
            modalStockInput.focus();
            
            // SEGUNDO: Después de un breve delay, seleccionar el texto
            setTimeout(() => {
                modalStockInput.select();
                console.log('✅ Teclado abierto y texto seleccionado en la modal de producto');
            }, 100);
            
            // Verificar que el focus se aplicó correctamente
            if (document.activeElement === modalStockInput) {
                console.log('✅ Focus aplicado correctamente, teclado debería abrirse');
                return true;
            } else {
                console.log('⚠️ Focus no se aplicó correctamente, reintentando...');
                // Reintentar después de un breve delay
                setTimeout(() => {
                    modalStockInput.focus();
                    setTimeout(() => {
                        modalStockInput.select();
                        console.log('🔄 Reintento de focus y selección completado');
                    }, 100);
                }, 150);
                return false;
            }
        } else {
            console.log('❌ No se encontró el input de stock en la modal');
            return false;
        }
    };

    // Función para habilitar el teclado en el textbox de código de barras
    window.enableBarcodeKeyboard = function() {
        const barcodeInput = document.getElementById('barcodeInput');
        if (barcodeInput) {
            barcodeInput.setAttribute('inputmode', 'numeric');
            console.log('⌨️ Teclado numérico habilitado para el textbox de código de barras');
        }
    };

    // Función para deshabilitar el teclado en el textbox de código de barras
    window.disableBarcodeKeyboard = function() {
        const barcodeInput = document.getElementById('barcodeInput');
        if (barcodeInput) {
            barcodeInput.setAttribute('inputmode', 'none');
            console.log('🚫 Teclado deshabilitado para el textbox de código de barras');
        }
    };

    // Función de emergencia para restaurar todo en pantalla completa
    window.emergencyRestore = function() {
        console.log('🚨 EMERGENCY RESTORE - Restaurando todo para pantalla completa');
        
        // Restaurar todos los paneles SIN LIMPIAR LOS ESTILOS NECESARIOS
        const leftPanel = document.querySelector('.left-panel');
        const rightPanel = document.querySelector('.right-panel');
        const resizeHandle = document.querySelector('.resize-handle');
        const header = document.querySelector('.depositos-header');
        const depositosContent = document.querySelector('.depositos-content');
        
        // Asegurar que el contenedor principal esté visible
        if (depositosContent) {
            depositosContent.style.display = 'flex';
            depositosContent.style.flexDirection = 'row';
            depositosContent.style.height = '100%';
            depositosContent.style.overflow = 'hidden';
            depositosContent.style.visibility = 'visible';
            depositosContent.style.opacity = '1';
        }
        
        // Restaurar panel izquierdo con estilos correctos
        if (leftPanel) {
            leftPanel.style.display = 'flex';
            leftPanel.style.width = '35%';
            leftPanel.style.minWidth = '280px';
            leftPanel.style.maxWidth = '70%';
            leftPanel.style.height = '100%';
            leftPanel.style.visibility = 'visible';
            leftPanel.style.opacity = '1';
            leftPanel.style.position = 'relative';
            leftPanel.style.zIndex = '1';
            leftPanel.classList.remove('show-on-mobile', 'panel-hidden');
        }
        
        // Restaurar panel derecho con estilos correctos
        if (rightPanel) {
            rightPanel.style.display = 'flex';
            rightPanel.style.width = '65%';
            rightPanel.style.height = '100%';
            rightPanel.style.visibility = 'visible';
            rightPanel.style.opacity = '1';
            rightPanel.style.position = 'relative';
            rightPanel.style.zIndex = '1';
            rightPanel.classList.remove('show-on-mobile', 'panel-hidden');
        }
        
        // Mostrar resize handle
        if (resizeHandle) {
            resizeHandle.style.display = 'block';
            resizeHandle.style.width = '4px';
            resizeHandle.style.height = '100%';
        }
        
        // Restaurar header
        if (header) {
            header.style.display = 'flex';
            header.style.visibility = 'visible';
            header.style.opacity = '1';
        }
        
        // Restaurar divs de ubicación
        const selectedLocationDivs = document.querySelectorAll('.selected-location, div[style*="background: linear-gradient(135deg, #e3f2fd"], div[style*="border: 2px solid #007bff"]');
        selectedLocationDivs.forEach(div => {
            div.style.display = '';
            div.style.visibility = '';
            div.style.opacity = '';
        });
        
        console.log('✅ Emergency restore completado - PANELES VISIBLES');
    };

    // Función específica para forzar visibilidad en móviles
    window.forceMobileVisibility = function() {
        console.log('📱 FORCE MOBILE VISIBILITY - Forzando visibilidad en móviles');
        
        const leftPanel = document.querySelector('.left-panel');
        const rightPanel = document.querySelector('.right-panel');
        const depositosContent = document.querySelector('.depositos-content');
        
        // Forzar visibilidad del contenedor principal
        if (depositosContent) {
            depositosContent.style.display = 'flex !important';
            depositosContent.style.flexDirection = 'column !important';
            depositosContent.style.height = 'auto !important';
            depositosContent.style.overflow = 'visible !important';
            depositosContent.style.visibility = 'visible !important';
            depositosContent.style.opacity = '1 !important';
        }
        
        // Forzar visibilidad del panel izquierdo
        if (leftPanel) {
            leftPanel.style.display = 'flex !important';
            leftPanel.style.visibility = 'visible !important';
            leftPanel.style.opacity = '1 !important';
            leftPanel.style.position = 'relative !important';
            leftPanel.style.zIndex = '1 !important';
            leftPanel.classList.remove('panel-hidden');
            console.log('✅ Panel izquierdo forzado a visible');
        }
        
        // Forzar visibilidad del panel derecho
        if (rightPanel) {
            rightPanel.style.display = 'flex !important';
            rightPanel.style.visibility = 'visible !important';
            rightPanel.style.opacity = '1 !important';
            rightPanel.style.position = 'relative !important';
            rightPanel.style.zIndex = '1 !important';
            rightPanel.classList.remove('panel-hidden');
            rightPanel.classList.add('show-on-mobile');
            console.log('✅ Panel derecho forzado a visible');
        }
        
        console.log('✅ Force mobile visibility completado');
    };

    // Función de emergencia para OCULTAR el panel de ubicaciones
    window.forceHideLocationsPanel = function() {
        const leftPanel = document.querySelector('.left-panel');
        if (leftPanel && leftPanel.classList.contains('panel-hidden')) {
            console.log('🚨 FORCE HIDE - Ocultando panel de ubicaciones con máxima agresividad');
            leftPanel.style.cssText = 'display: none !important; width: 0 !important; height: 0 !important; overflow: hidden !important; visibility: hidden !important; opacity: 0 !important; position: absolute !important; left: -9999px !important; top: -9999px !important; z-index: -9999 !important; margin: 0 !important; padding: 0 !important; border: none !important; box-shadow: none !important; background: transparent !important;';
        }
    };

    // Función específica para pantalla completa que FORZA la visibilidad
    window.ensureDesktopLayout = function() {
        console.log('🖥️ ENSURE DESKTOP LAYOUT - FORZANDO visibilidad en escritorio');
        
        // Los estilos ya están en el HTML, solo asegurar que no se sobrescriban
        const depositosContent = document.querySelector('.depositos-content');
        const leftPanel = document.querySelector('.left-panel');
        const rightPanel = document.querySelector('.right-panel');
        const header = document.querySelector('.depositos-header');
        
        if (depositosContent) {
            depositosContent.style.cssText = 'display: flex !important; flex-direction: row !important; height: 100% !important; overflow: hidden !important; visibility: visible !important; opacity: 1 !important;';
        }
        
        if (leftPanel) {
            leftPanel.style.cssText = 'display: flex !important; width: 35% !important; min-width: 320px !important; max-width: 70% !important; height: 100% !important; flex-direction: column !important; background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%) !important; border-right: 1px solid #dee2e6 !important; box-shadow: 2px 0 10px rgba(0, 0, 0, 0.05) !important; visibility: visible !important; opacity: 1 !important; position: relative !important; z-index: 1 !important;';
        }
        
        if (rightPanel) {
            rightPanel.style.cssText = 'display: flex !important; width: 65% !important; height: 100% !important; flex-direction: column !important; background: white !important; visibility: visible !important; opacity: 1 !important; position: relative !important; z-index: 1 !important;';
        }
        
        if (header) {
            header.style.cssText = 'display: flex !important; visibility: visible !important; opacity: 1 !important;';
        }
        
        console.log('✅ Desktop layout FORZADO - PANELES VISIBLES');
    };

    // Función para forzar la detección de móvil al cargar
    window.forceMobileDetection = function() {
        const isMobile = window.isMobileDevice();
        console.log('🔍 forceMobileDetection - isMobile:', isMobile);
        
        // Actualizar el estado en Blazor si está disponible
        if (window.blazorComponent) {
            window.updateMobileState(window.blazorComponent);
        }
        
        return isMobile;
    };

    // Ejecutar al cargar la página
    document.addEventListener('DOMContentLoaded', function() {
        // Verificar si es pantalla completa primero
        if (window.innerWidth > 768) {
            console.log('🖥️ Pantalla completa detectada al cargar - aplicando ensureDesktopLayout');
            window.ensureDesktopLayout();
        } else {
            console.log('📱 Móvil detectado al cargar - aplicando forceMobileStyles y forceMobileVisibility');
            window.forceMobileStyles();
            // Forzar visibilidad adicional en móviles
            setTimeout(() => {
                window.forceMobileVisibility();
            }, 100);
        }
        
        window.initResize();
        window.removeBlueDiv();
        
        // Ejecutar cada 100ms para asegurar que se elimine el div azul
        setInterval(window.removeBlueDiv, 100);
        
        // Ejecutar cada 500ms para asegurar que se oculte el panel de ubicaciones
        setInterval(window.forceHideLocationsPanel, 500);
        
        // En móviles, ejecutar forceMobileVisibility cada segundo para asegurar visibilidad
        if (window.innerWidth <= 768) {
            setInterval(() => {
                if (window.innerWidth <= 768) {
                    window.forceMobileVisibility();
                }
            }, 1000);
        } else {
            // En pantalla completa, ejecutar ensureDesktopLayout cada segundo para asegurar visibilidad
            setInterval(() => {
                if (window.innerWidth > 768) {
                    window.ensureDesktopLayout();
                }
            }, 1000);
        }
        
        // Asegurar focus en el textbox después de un breve delay
        setTimeout(() => {
            window.ensureBarcodeFocus();
        }, 500);
        
        // FUNCIÓN DE EMERGENCIA: Ejecutar ensureDesktopLayout múltiples veces
        if (window.innerWidth > 768) {
            console.log('🚨 EMERGENCIA: Ejecutando ensureDesktopLayout múltiples veces');
            setTimeout(() => window.ensureDesktopLayout(), 100);
            setTimeout(() => window.ensureDesktopLayout(), 500);
            setTimeout(() => window.ensureDesktopLayout(), 1000);
            setTimeout(() => window.ensureDesktopLayout(), 2000);
        }
    });

    // Ejecutar al redimensionar la ventana
    window.addEventListener('resize', function() {
        console.log('📏 Resize detectado - width:', window.innerWidth);
        
        if (window.innerWidth > 768) {
            // Pantalla completa - usar ensureDesktopLayout (NO emergency restore)
            console.log('🖥️ Cambio a pantalla completa - aplicando ensureDesktopLayout');
            window.ensureDesktopLayout();
        } else {
            // Pantalla pequeña - usar forceMobileStyles y forceMobileVisibility
            console.log('📱 Cambio a pantalla pequeña - aplicando forceMobileStyles y forceMobileVisibility');
            window.forceMobileStyles();
            // Forzar visibilidad adicional en móviles
            setTimeout(() => {
                window.forceMobileVisibility();
            }, 100);
            // Hacer focus al textbox cuando se redimensiona a pantalla pequeña (solo si no hay modales abiertas)
            setTimeout(() => {
                if (!window.hasOpenModal()) {
                    window.ensureBarcodeFocus();
                } else {
                    console.log('🚫 Modal abierta detectada durante redimensionamiento, no aplicando focus');
                }
            }, 300);
        }
    });

    // Listener para detectar cambios de tamaño de pantalla
    window.addEventListener('resize', function() {
        // Debounce para evitar llamadas excesivas
        clearTimeout(window.resizeTimeout);
        window.resizeTimeout = setTimeout(() => {
            if (window.blazorComponent) {
                window.updateMobileState(window.blazorComponent);
            }
        }, 250);
    });

    // Detectar cuando se presiona F12 (Developer Tools)
    window.addEventListener('keydown', function(e) {
        // F12 o Ctrl+Shift+I (Developer Tools)
        if (e.key === 'F12' || (e.ctrlKey && e.shiftKey && e.key === 'I')) {
            console.log('🔧 F12 detectado - Aplicando focus al textbox de código de barras');
            // Delay para que se abra el Developer Tools y cambie el tamaño
            setTimeout(() => {
                window.focusBarcodeInput();
            }, 500);
            
            // Aplicar focus adicional después de más tiempo para asegurar
            setTimeout(() => {
                window.focusBarcodeInput();
            }, 1000);
            
            setTimeout(() => {
                window.focusBarcodeInput();
            }, 2000);
        }
    });

    // Detectar cambios en el tamaño de la ventana (incluyendo F12)
    let resizeTimeout;
    window.addEventListener('resize', function() {
        console.log('📏 Resize detectado - Aplicando focus al textbox de código de barras');
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            window.focusBarcodeInput();
        }, 300);
    });

    // Detectar si es dispositivo móvil (mejorado)
    window.isMobileDevice = function() {
        const isMobileWidth = window.innerWidth <= 768;
        const isMobileUserAgent = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
        
        const result = isMobileWidth || isMobileUserAgent || isTouchDevice;
        console.log('🔍 isMobileDevice - Width:', window.innerWidth, 'isMobileWidth:', isMobileWidth, 'isMobileUserAgent:', isMobileUserAgent, 'isTouchDevice:', isTouchDevice, 'result:', result);
        
        return result;
    }

    // Función para actualizar el estado de móvil en Blazor
    window.updateMobileState = function(blazorComponent) {
        if (blazorComponent) {
            const isMobile = window.isMobileDevice();
            console.log('📱 updateMobileState - isMobile:', isMobile);
            blazorComponent.invokeMethodAsync('SetMobileState', isMobile);
        }
    }

    // Funciones para ocultar elementos
    window.hideById = function(id) {
        const element = document.getElementById(id);
        if (element) {
            element.style.display = 'none';
        }
    }

    window.hideByClass = function(className) {
        const elements = document.getElementsByClassName(className);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = 'none';
        }
    }

    // Función para aplicar focus automáticamente al textbox de código de barras
    window.autoFocusBarcode = function() {
        console.log('🎯 autoFocusBarcode - Aplicando focus automático al textbox de código de barras');
        
        // Verificar si hay alguna modal abierta antes de aplicar focus (múltiples selectores para mayor compatibilidad)
        const hasOpenModal = document.querySelector('.app-modal.show') !== null || 
                            document.querySelector('.modal.show') !== null ||
                            document.querySelector('[data-bs-modal="true"]') !== null ||
                            document.querySelector('.modal[style*="display: block"]') !== null;
        if (hasOpenModal) {
            console.log('🚫 Modal abierta detectada, no aplicando focus automático al textbox de código de barras');
            return;
        }
        
        // Aplicar focus inmediatamente
        window.focusBarcodeInput();
        
        // Aplicar focus después de un delay para asegurar
        setTimeout(() => {
            window.focusBarcodeInput();
        }, 500);
        
        // Aplicar focus después de más tiempo para casos difíciles
        setTimeout(() => {
            window.focusBarcodeInput();
        }, 1000);
    };

    // Aplicar focus automáticamente cuando se carga la página
    document.addEventListener('DOMContentLoaded', function() {
        console.log('📄 DOMContentLoaded - Aplicando focus automático');
        window.autoFocusBarcode();
    });

    // Aplicar focus cuando la página está completamente cargada
    window.addEventListener('load', function() {
        console.log('🔄 Window load - Aplicando focus automático');
        window.autoFocusBarcode();
    });

    window.innerResizeBegin = function(){};
    window.innerResizeEnd = function(){};

    // Funcionalidad para redimensionar columnas
    window.startColumnResize = function(startX) {
        window.__colResize = window.__colResize || { active: false };
        const th = event?.target?.closest?.('th[data-column]');
        if (!th) return;
        const table = th.closest('table');
        if (!table) return;
        const columnKey = th.getAttribute('data-column');
        window.__colResize = {
            active: true,
            startX: startX,
            th: th,
            startWidth: th.offsetWidth,
            columnKey: columnKey
        };
        document.addEventListener('mousemove', handleColumnResize);
        document.addEventListener('mouseup', stopColumnResize);
        document.body.style.cursor = 'col-resize';
        document.body.style.userSelect = 'none';
    };

    function handleColumnResize(e) {
        if (!window.__colResize || !window.__colResize.active) return;
        const dx = e.clientX - window.__colResize.startX;
        const newWidth = Math.max(60, window.__colResize.startWidth + dx);
        // Aplicar ancho al th
        window.__colResize.th.style.width = newWidth + 'px';
        // Aplicar mismo ancho a todas las celdas de esa columna
        const columnKey = window.__colResize.columnKey;
        const table = window.__colResize.th.closest('table');
        if (table && columnKey) {
            const index = Array.from(window.__colResize.th.parentElement.children).indexOf(window.__colResize.th);
            // Ajustar celdas del body por índice
            table.querySelectorAll('tbody tr').forEach(tr => {
                const td = tr.children[index];
                if (td) td.style.width = newWidth + 'px';
            });
        }
    }

    function stopColumnResize() {
        document.removeEventListener('mousemove', handleColumnResize);
        document.removeEventListener('mouseup', stopColumnResize);
        document.body.style.cursor = '';
        document.body.style.userSelect = '';
        if (window.__colResize) window.__colResize.active = false;
    }

    // Función para hacer responsive la grilla de datos
    window.initDataGridResponsive = function() {
        try {
            console.log('🔧 Inicializando DataGrid responsive...');
            
            // Verificar que el DOM esté listo
            if (document.readyState !== 'complete') {
                console.log('⏳ DOM no está completo, esperando...');
                setTimeout(() => window.initDataGridResponsive(), 100);
                return;
            }
            
            const dataGridContainers = document.querySelectorAll('.data-grid-container');
            console.log(`🔧 Encontrados ${dataGridContainers.length} contenedores de DataGrid`);
            
            if (dataGridContainers.length === 0) {
                console.log('⚠️ No se encontraron contenedores de DataGrid, reintentando en 200ms...');
                setTimeout(() => window.initDataGridResponsive(), 200);
                return;
            }
            
            function updateDataGridResponsive() {
                try {
                    const isSmallScreen = window.innerWidth <= 1024;
                    console.log(`🔧 Actualizando DataGrid responsive - Pantalla pequeña: ${isSmallScreen}`);
                    
                    dataGridContainers.forEach((container, index) => {
                        if (container && container.classList) {
                            if (isSmallScreen) {
                                container.classList.add('responsive');
                            } else {
                                container.classList.remove('responsive');
                            }
                            console.log(`🔧 Contenedor ${index + 1} actualizado`);
                        }
                    });
                } catch (error) {
                    console.error('❌ Error en updateDataGridResponsive:', error);
                }
            }
            
            // Aplicar al cargar
            updateDataGridResponsive();
            
            // Aplicar al redimensionar
            window.addEventListener('resize', updateDataGridResponsive);
            
            // Aplicar cuando se abre/cierra el modo developer
            if (window.ResizeObserver) {
                const observer = new ResizeObserver(entries => {
                    updateDataGridResponsive();
                });
                
                dataGridContainers.forEach(container => {
                    if (container) {
                        observer.observe(container);
                    }
                });
            }
            
            console.log('✅ DataGrid responsive inicializado correctamente');
        } catch (error) {
            console.error('❌ Error inicializando DataGrid responsive:', error);
        }
    };


    // ========================================
    // FUNCIONES PARA QR SCANNER CON CÁMARA
    // ========================================
    
    let qrStream = null;
    let qrCodeReader = null;
    let isQRScannerActive = false;

    // Verificar permisos de cámara
    window.checkCameraPermissions = async function() {
        try {
            if (!navigator.permissions) {
                console.log('API de permisos no disponible');
                return 'unknown';
            }
            
            const permission = await navigator.permissions.query({ name: 'camera' });
            console.log('Estado de permisos de cámara:', permission.state);
            return permission.state;
        } catch (error) {
            console.log('Error verificando permisos:', error);
            return 'unknown';
        }
    };

    // Solicitar permisos de cámara explícitamente
    window.requestCameraPermissions = async function() {
        try {
            // Intentar una solicitud simple para activar el prompt de permisos
            const stream = await navigator.mediaDevices.getUserMedia({ video: true });
            stream.getTracks().forEach(track => track.stop());
            return true;
        } catch (error) {
            console.log('Error solicitando permisos:', error);
            return false;
        }
    };

    // Registrar el componente Blazor
    window.registerBlazorComponent = function(component) {
        window.blazorComponent = component;
        console.log('✅ Componente Blazor registrado para OnQRDetected');
    };

    // Verificar si el componente Blazor está registrado
    window.isBlazorComponentRegistered = function() {
        return typeof window.blazorComponent !== 'undefined' && window.blazorComponent !== null;
    };

    // Limpiar permisos de cámara y forzar nueva solicitud
    window.resetCameraPermissions = async function() {
        try {
            console.log('🔄 Reseteando permisos de cámara...');
            
            // Detener cualquier stream activo
            if (qrStream) {
                qrStream.getTracks().forEach(track => track.stop());
                qrStream = null;
            }
            
            // Limpiar el video
            const video = document.getElementById('qr-video');
            if (video) {
                video.srcObject = null;
            }
            
            // Esperar un momento antes de solicitar permisos nuevamente
            await new Promise(resolve => setTimeout(resolve, 500));
            
            console.log('✅ Permisos reseteados, listo para nueva solicitud');
        } catch (error) {
            console.error('❌ Error reseteando permisos:', error);
        }
    };

    // Inicializar el QR Scanner
    window.initQRScanner = function() {
        console.log('Inicializando QR Scanner...');
        // Preparar el escáner para activación automática
        isQRScannerActive = false;
        
        // Verificar que el componente Blazor esté disponible
        if (typeof window.blazorComponent === 'undefined') {
            console.warn('⚠️ blazorComponent no está disponible, las llamadas a OnQRDetected fallarán');
        } else {
            console.log('✅ blazorComponent disponible para OnQRDetected');
        }
    };


    // Forzar activación de cámara con método más agresivo
    window.forceCameraActivation = async function() {
        try {
            console.log('🔥 FORZANDO activación de cámara...');
            
            const video = document.getElementById('qr-video');
            if (!video) {
                console.error('❌ Elemento de video no encontrado');
                return;
            }

            // Verificar soporte básico
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                console.error('❌ Navegador no soporta acceso a la cámara');
                alert('Tu navegador no soporta acceso a la cámara. Usa Chrome, Firefox o Safari.');
                return;
            }

            console.log('📷 SOLICITANDO acceso a la cámara (método forzado)...');

            // Configuraciones múltiples para forzar la solicitud (priorizando cámara trasera)
            const configs = [
                { video: { facingMode: 'environment' } },
                { video: { facingMode: 'environment', width: 640, height: 480 } },
                { video: { facingMode: 'environment', width: 1280, height: 720 } },
                { video: true },
                { video: { facingMode: 'user' } }
            ];

            let success = false;
            for (let i = 0; i < configs.length; i++) {
                try {
                    console.log(`🎯 Intentando configuración ${i + 1}/${configs.length}...`);
                    qrStream = await navigator.mediaDevices.getUserMedia(configs[i]);
                    console.log(`✅ Cámara activada con configuración ${i + 1}`);
                    success = true;
                    break;
                } catch (configError) {
                    console.log(`❌ Configuración ${i + 1} falló:`, configError.name);
                    if (i === configs.length - 1) {
                        throw configError;
                    }
                }
            }

            if (success && qrStream) {
                video.srcObject = qrStream;
                video.play();
                
                console.log('✅ Cámara activada correctamente');

                // Usar QrScanner.js si está disponible
                if (typeof QrScanner !== 'undefined') {
                    console.log('🔍 Inicializando QrScanner.js...');
                    qrCodeReader = new QrScanner(video, result => {
                        console.log('✅ QR detectado:', result);
                        if (window.blazorComponent) {
                            window.blazorComponent.invokeMethodAsync('OnQRDetected', result);
                        }
                    });
                    
                    await qrCodeReader.start();
                    isQRScannerActive = true;
                    
                } else {
                    console.log('⚠️ QrScanner no disponible, usando detección manual...');
                    isQRScannerActive = true;
                    startCanvasQRDetection(video);
                }
            }

        } catch (error) {
            console.error('❌ Error forzando activación de cámara:', error);
            
            if (error.name === 'NotAllowedError') {
                console.log('❌ PERMISOS DENEGADOS - El navegador no mostrará la notificación');
                alert('Permisos de cámara denegados. Por favor:\n1. Haz clic en el ícono de cámara en la barra de direcciones\n2. O ve a Configuración del sitio → Permisos → Cámara → Permitir\n3. O recarga la página y permite cuando aparezca la notificación');
            } else if (error.name === 'NotFoundError') {
                console.log('❌ No se encontró cámara en el dispositivo');
                alert('No se encontró ninguna cámara en este dispositivo.');
            } else {
                console.log(`❌ Error de cámara: ${error.message}`);
                alert(`Error de cámara: ${error.message}`);
            }
        }
    };

    // Iniciar el escáner QR con cámara - VERSIÓN SIMPLIFICADA
    window.startQRScanner = async function() {
        try {
            console.log('🚀 ====== INICIANDO ESCÁNER QR ======');
            
            const video = document.getElementById('qr-video');
            if (!video) {
                console.error('❌ Elemento de video no encontrado');
                alert('Error: Elemento de video no encontrado');
                return;
            }
            console.log('✅ Elemento de video encontrado');

            // Verificar soporte básico
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                console.error('❌ Navegador no soporta acceso a la cámara');
                alert('Tu navegador no soporta acceso a la cámara. Usa Chrome, Firefox o Safari.');
                return;
            }
            console.log('✅ Navegador soporta acceso a la cámara');

            // Configuración simple de cámara
            const constraints = {
                video: {
                    facingMode: 'environment',
                    width: { ideal: 640 },
                    height: { ideal: 480 }
                }
            };

            console.log('📷 Solicitando acceso a la cámara...');
            console.log('📷 El navegador debería pedir permisos ahora...');

            // Intentar obtener acceso a la cámara
            qrStream = await navigator.mediaDevices.getUserMedia(constraints);
            console.log('✅ Stream de cámara obtenido');
            
            video.srcObject = qrStream;
            await video.play();
            console.log('✅ Video iniciado correctamente');
            
            console.log('✅ Cámara activada correctamente');

            // Usar QrScanner.js si está disponible
            if (typeof QrScanner !== 'undefined') {
                console.log('🔍 Inicializando QrScanner.js...');
                try {
                    qrCodeReader = new QrScanner(video, result => {
                        console.log('✅ QR detectado:', result);
                        if (window.blazorComponent) {
                            window.blazorComponent.invokeMethodAsync('OnQRDetected', result);
                        } else {
                            console.warn('⚠️ blazorComponent no disponible');
                        }
                    });
                    
                    await qrCodeReader.start();
                    isQRScannerActive = true;
                    console.log('✅ QrScanner iniciado correctamente');
                } catch (qrError) {
                    console.error('❌ Error inicializando QrScanner:', qrError);
                    isQRScannerActive = true;
                }
            } else {
                console.log('⚠️ QrScanner no disponible');
                isQRScannerActive = true;
            }

        } catch (error) {
            console.error('❌ ====== ERROR INICIANDO CÁMARA ======');
            console.error('❌ Tipo de error:', error.name);
            console.error('❌ Mensaje:', error.message);
            
            if (error.name === 'NotAllowedError') {
                console.log('❌ PERMISOS DENEGADOS');
                alert('Permisos de cámara denegados. Por favor:\n1. Haz clic en el ícono de cámara en la barra de direcciones\n2. O ve a Configuración del sitio → Permisos → Cámara → Permitir\n3. O recarga la página y permite cuando aparezca la notificación');
            } else if (error.name === 'NotFoundError') {
                console.log('❌ No se encontró cámara');
                alert('No se encontró ninguna cámara en este dispositivo.');
            } else if (error.name === 'NotReadableError') {
                console.log('❌ Cámara en uso');
                alert('La cámara está siendo usada por otra aplicación. Cierra otras aplicaciones que usen la cámara.');
            } else {
                console.log(`❌ Error de cámara: ${error.message}`);
                alert(`Error de cámara: ${error.message}`);
            }
        }
    };

    // Detener el escáner QR
    window.stopQRScanner = function() {
        try {
            if (qrCodeReader) {
                qrCodeReader.stop();
                qrCodeReader.destroy();
                qrCodeReader = null;
            }
            
            if (qrStream) {
                qrStream.getTracks().forEach(track => track.stop());
                qrStream = null;
            }

            const video = document.getElementById('qr-video');
            if (video) {
                video.srcObject = null;
            }
            
            // Detener QuaggaJS si está activo
            if (typeof Quagga !== 'undefined' && isQRScannerActive) {
                Quagga.stop();
            }
            
            // Limpiar intervalos de detección alternativos
            const intervals = window.qrDetectionIntervals || [];
            intervals.forEach(interval => clearInterval(interval));
            window.qrDetectionIntervals = [];
            
            isQRScannerActive = false;
            updateCameraToggleText(false);
            
        } catch (error) {
            console.error('Error deteniendo QR scanner:', error);
        }
    };

    // Mostrar resultado del QR
    window.showQRResult = function(text) {
        const resultDiv = document.getElementById('qr-result');
        const errorDiv = document.getElementById('qr-error');
        const textSpan = document.getElementById('qr-detected-text');
        
        if (resultDiv && textSpan) {
            textSpan.textContent = text;
            resultDiv.style.display = 'block';
            resultDiv.className = 'alert alert-success mt-3';
        }
        
        if (errorDiv) {
            errorDiv.style.display = 'none';
        }
        
        console.log('QR Status:', text);
    };

    // Mostrar error del QR
    window.showQRError = function(message) {
        const resultDiv = document.getElementById('qr-result');
        const errorDiv = document.getElementById('qr-error');
        const errorSpan = document.getElementById('qr-error-text');
        
        if (errorDiv && errorSpan) {
            errorSpan.textContent = message;
            errorDiv.style.display = 'block';
            errorDiv.className = 'alert alert-danger mt-3';
        }
        
        if (resultDiv) {
            resultDiv.style.display = 'none';
        }
        
        console.error('QR Error:', message);
    };

    // Habilitar el botón de búsqueda
    window.enableQRSearchButton = function() {
        const btn = document.querySelector('button[onclick="BuscarPorQR"]');
        if (btn) {
            btn.disabled = false;
        }
    };

    // Actualizar el texto del botón de cámara
    function updateCameraToggleText(isActive) {
        const toggleText = document.getElementById('camera-toggle-text');
        if (toggleText) {
            toggleText.textContent = isActive ? 'Desactivar Cámara' : 'Activar Cámara';
        }
    }

    // Mostrar/ocultar botón de permisos
    window.showPermissionRequest = function() {
        const permissionDiv = document.getElementById('qr-permission-request');
        if (permissionDiv) {
            permissionDiv.style.display = 'block';
        }
    };

    window.hidePermissionRequest = function() {
        const permissionDiv = document.getElementById('qr-permission-request');
        if (permissionDiv) {
            permissionDiv.style.display = 'none';
        }
    };

    // Función alternativa de detección QR usando canvas - SIMPLIFICADA
    function startCanvasQRDetection(video) {
        console.log('🔍 Iniciando detección QR con canvas...');
        
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        let isDetecting = false;
        
        function detectQR() {
            if (isDetecting || !isQRScannerActive || video.videoWidth === 0) return;
            
            isDetecting = true;
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            
            // Usar jsQR (más confiable)
            if (typeof jsQR !== 'undefined') {
                try {
                    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                    const code = jsQR(imageData.data, imageData.width, imageData.height);
                    if (code) {
                        console.log('✅ QR detectado con jsQR:', code.data);
                        if (window.blazorComponent) {
                            window.blazorComponent.invokeMethodAsync('OnQRDetected', code.data);
                        }
                    }
                } catch (error) {
                    console.log('Error con jsQR:', error.message);
                }
            }
            
            isDetecting = false;
        }
        
        // Detectar QR cada 300ms (más frecuente)
        const detectionInterval = setInterval(detectQR, 300);
        
        // Registrar el intervalo para limpieza posterior
        if (!window.qrDetectionIntervals) {
            window.qrDetectionIntervals = [];
        }
        window.qrDetectionIntervals.push(detectionInterval);
        
        showQRResult('Cámara activa - Apunta hacia un código QR');
    }

    // Función de fallback con QuaggaJS
    async function initQuaggaJS(video) {
        try {
            // Cargar QuaggaJS dinámicamente si no está disponible
            if (typeof Quagga === 'undefined') {
                const script = document.createElement('script');
                script.src = 'https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js';
                document.head.appendChild(script);
                
                await new Promise((resolve, reject) => {
                    script.onload = resolve;
                    script.onerror = reject;
                });
            }

            // Configuración mejorada para QuaggaJS con soporte para QR
            Quagga.init({
                inputStream: {
                    name: "Live",
                    type: "LiveStream",
                    target: video,
                    constraints: {
                        width: 640,
                        height: 480,
                        facingMode: "environment"
                    }
                },
                decoder: {
                    readers: [
                        "code_128_reader", 
                        "ean_reader", 
                        "ean_8_reader", 
                        "code_39_reader", 
                        "code_39_vin_reader", 
                        "codabar_reader", 
                        "upc_reader", 
                        "upc_e_reader", 
                        "i2of5_reader"
                    ],
                    debug: {
                        showCanvas: false,
                        showPatches: false,
                        showFoundPatches: false,
                        showSkeleton: false,
                        showLabels: false,
                        showPatchLabels: false,
                        showBoundingBox: false,
                        showBoundingBoxes: false
                    }
                },
                locate: true,
                locator: {
                    patchSize: "medium",
                    halfSample: true
                }
            }, function(err) {
                if (err) {
                    console.error('Error inicializando QuaggaJS:', err);
                    showQRError('Error inicializando el escáner de códigos');
                    return;
                }
                console.log("QuaggaJS inicializado correctamente");
                Quagga.start();
                isQRScannerActive = true;
                updateCameraToggleText(true);
                showQRResult('Cámara activa - Apunta hacia un código QR o código de barras');
            });

            Quagga.onDetected(function(data) {
                console.log('Código detectado con QuaggaJS:', data.codeResult.code);
                if (window.blazorComponent) {
                    window.blazorComponent.invokeMethodAsync('OnQRDetected', data.codeResult.code);
                }
            });

        } catch (error) {
            console.error('Error con QuaggaJS:', error);
            showQRError('Error inicializando el escáner de códigos');
        }
    }

</script>
</AuthorizeView>
